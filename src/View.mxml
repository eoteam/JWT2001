<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:samples="samples.*" visible="false"
					   xmlns:view="com.pentagram.view.*" showStatusBar="false"
					   creationComplete="handleCreationComplete()"   frameRate="60"
					   applicationComplete="init()" xmlns:modules="ws.tink.spark.modules.*" xmlns:instance="com.pentagram.instance.*" >
	
	<fx:Style source="assets/main.css" />
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			import air.update.ApplicationUpdaterUI;
			import air.update.events.DownloadErrorEvent;
			import air.update.events.StatusFileUpdateEvent;
			import air.update.events.StatusUpdateErrorEvent;
			import air.update.events.StatusUpdateEvent;
			import air.update.events.UpdateEvent;
			
			import com.pentagram.ViewContext;
			
			import flash.events.NativeWindowBoundsEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			import flash.utils.getQualifiedClassName;
			
			import flashx.textLayout.compose.TextLineRecycler;
			
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.events.AIREvent;
			import mx.events.FlexEvent;
			import mx.events.StyleEvent;
			import mx.managers.ToolTipManager;
			

			
			protected var monitor:URLMonitor;
			public var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI(); // Used for auto-update
			protected var file:File; // Used for preferences file
			protected var currentVersion:String="2.0.0";			
			public var context:ViewContext;
			
			public function get applicationEventDispatcher():IEventDispatcher
			{
				return context.eventDispatcher;
			} 
			
			private function handleCreationComplete(): void {		
				context = new ViewContext();
				context.contextView = this;		
				TextLineRecycler.textLineRecyclerEnabled = false;
				ToolTipManager.showDelay = 0;
			}  	
			private function init():void {
				setupListeners();
				checkUpdate();
				setupNetworking();
				setupIdle();
				loadPreferences();
			}
			private function setupNetworking():void {
				monitor = new URLMonitor(new URLRequest("http://www.google.com")); // change URL to URL desired
				monitor.addEventListener(StatusEvent.STATUS, onStatusChange);
				monitor.pollInterval = 20000;// Milliseconds
				monitor.start();
				NativeApplication.nativeApplication.addEventListener(Event.NETWORK_CHANGE,onNetworkChange);
			}
			private function setupIdle():void {
				NativeApplication.nativeApplication.idleThreshold = 5;
				NativeApplication.nativeApplication.addEventListener(Event.USER_IDLE, onUserIdle);
				NativeApplication.nativeApplication.addEventListener (Event.USER_PRESENT, onUserPresent);
			}
			private function setupListeners():void {
				addEventListener(AIREvent.APPLICATION_ACTIVATE, onAppActivate);
				addEventListener(AIREvent.APPLICATION_DEACTIVATE, onAppDeactivate);		
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, errorHandler);
			}
			private function loadPreferences():void {
				file = File.applicationStorageDirectory;
				file = file.resolvePath("Preferences/version.txt");
				if (file.exists)
					checkVersion();
				else firstRun();
			}
			private function onStatusChange(e:StatusEvent):void {
				if (monitor.available) {
					visible = false;
					this.dispatchEvent(new Event("networkOn"));
				} else {
					visible = true;
				}
			}
			private function checkUpdate():void {
				appUpdater.updateURL = "http://208.99.179.45/update.xml";
				
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onUpdaterError);
				appUpdater.addEventListener(StatusUpdateEvent.UPDATE_STATUS,handleStatusUpdate);
				appUpdater.addEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, handleStatusUpdate);
				appUpdater.addEventListener(StatusFileUpdateEvent.FILE_UPDATE_STATUS,handleStatusUpdate);
				appUpdater.addEventListener(DownloadErrorEvent.DOWNLOAD_ERROR,handleStatusUpdate);
				appUpdater.addEventListener(UpdateEvent.BEFORE_INSTALL,handleStatusUpdate);
				appUpdater.addEventListener(UpdateEvent.DOWNLOAD_COMPLETE,handleStatusUpdate);
				appUpdater.addEventListener(UpdateEvent.CHECK_FOR_UPDATE,handleStatusUpdate);
				appUpdater.addEventListener(UpdateEvent.INITIALIZED,handleStatusUpdate);
				appUpdater.addEventListener(ProgressEvent.PROGRESS,handleStatusUpdate);
				
				appUpdater.initialize();
				appUpdater.isCheckForUpdateVisible = false;
			}
			private function onUpdate(event:UpdateEvent):void {
				appUpdater.checkNow();
			}
			private function handleStatusUpdate(event:Event):void {
				trace(event.type + "-----" + flash.utils.getQualifiedClassName(event));		
				if(event is StatusUpdateEvent) {
					var version:String = StatusUpdateEvent(event).version;
					if(version != currentVersion) {
						this.currentVersion = version;
						var v:NativeWindow = NativeApplication.nativeApplication.openedWindows[1] as NativeWindow;
						v.x = v.y = 50;
						v.alwaysInFront = true;
					}
				}
				if(event is DownloadErrorEvent) {
					trace("Error");
				}
			}
			private function onUpdaterError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			private function onNetworkChange(e:Event):void {
				trace("Network State Changed");
			}
			private function onUserIdle(event:Event):void {

			}
			private function onUserPresent(event:Event):void {

			}
			private function errorHandler(e:UncaughtErrorEvent):void {
				e.preventDefault();
				Alert.show("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}
			private function checkVersion():void {
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.READ);
				var prevVersion:String = stream.readUTFBytes(stream.bytesAvailable);
				stream.close();
				if (prevVersion == currentVersion) {
					return;
				}
				else
					writeVersionFile();
			}	
			private function firstRun():void {
				trace("First time the application has been run, save to the file.");
				writeVersionFile();
			}
			private function writeVersionFile():void {
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeUTFBytes(currentVersion);
				stream.close();
			}
			private function onAppActivate(event:Event):void {
				
			}
			private function onAppDeactivate(event:Event):void {
				
			}	
			private function onInvoke(invokeEvt:InvokeEvent):void  {
				
			}
		]]>
	</fx:Script>
	<s:Label fontSize="20" verticalCenter="0" horizontalCenter="0" text="You seem to be working offline, please check your network connection" />
</s:WindowedApplication>