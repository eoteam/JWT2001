<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" currentState="closedAndMap">

	<fx:Script>
		<![CDATA[
			import mx.events.IndexChangedEvent;
			
			import spark.skins.spark.CheckBoxSkin;
			protected function toggle_changeHandler(event:Event):void
			{
				if(toggle.selected) {
					currentState = "openAnd"+state;
					
				}
				else currentState = "closedAnd"+state;
			}
			public function initTools():void {
				visualizerArea.addEventListener(IndexChangedEvent.CHANGE,handleIndexChanged,false,0,true);
			}
			private function handleIndexChanged(event:IndexChangedEvent):void {
				switch(visualizerArea.selectedIndex) {
					case 0:
						this.currentState = isOpen? 'openAndCluster' : 'closedAndCluster';
						break;
					case 1:
						this.currentState = isOpen? 'openAndMap' : 'closedAndMap';
						break;					
					case 2:
						this.currentState = isOpen? 'openAndGraph' : 'closedAndGraph';
						break;					
				}
			}
			public function set state(value:String):void {
				if(openStates.indexOf(currentState) != -1)
					currentState = 'openAnd'+value;
				else currentState = 'closedAnd'+value;
			}
			public function get state():String {
				if(clusterStates.indexOf(currentState) != -1)
					return 'Cluster';
				else if(mapStates.indexOf(currentState) != -1)
					return 'Map';
				else if(graphStates.indexOf(currentState) != -1)
					return 'Graph';
				else return '';
			}
			public function get isOpen():Boolean {
				if(openStates.indexOf(currentState) != -1)
					return true;
				else if(mapStates.indexOf(currentState) != -1)
					return false;
				else return false;
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<mx:ViewStack id="visualizerArea" />
		<fx:Array id="clusterStates">
			<fx:String>closedAndCluster</fx:String>
			<fx:String>openAndCluster</fx:String>
		</fx:Array>
		<fx:Array id="mapStates">
			<fx:String>closedAndMap</fx:String>
			<fx:String>openAndMap</fx:String>
		</fx:Array>
		<fx:Array id="graphStates">
			<fx:String>closedAndGraph</fx:String>
			<fx:String>openAndGraph</fx:String>
		</fx:Array>
		<fx:Array id="openStates">
			<fx:String>openAndCluster</fx:String>
			<fx:String>openAndMap</fx:String>
			<fx:String>openAndGraph</fx:String>
		</fx:Array>
		<fx:Array id="closedStates">
			<fx:String>closedAndCluster</fx:String>
			<fx:String>closedAndMap</fx:String>
			<fx:String>closedAndGraph</fx:String>
		</fx:Array>
	</fx:Declarations>
	<s:states>
		<s:State name="closedAndCluster" stateGroups="closed,cluster" />
		<s:State name="openAndCluster" stateGroups="open,cluster" />
		<s:State name="closedAndMap" stateGroups="closed,map" />
		<s:State name="openAndMap" stateGroups="open,map" />
		<s:State name="closedAndGraph" stateGroups="closed,graph" />
		<s:State name="openAndGraph" stateGroups="open,graph" />
	</s:states>

		<s:ToggleButton id="toggle" width="8" height="100%" change="toggle_changeHandler(event)"/>
		
		<s:Rect width.closed="0" left="8" height="100%" width="{toolContainer.width}">
			<s:fill>
				<s:SolidColor color="0x1A1A1A" alpha="0.85" />
			</s:fill>
		</s:Rect> 
		
		<s:VGroup width.closed="0" left="8" id="toolContainer" gap="0">
			<s:List borderVisible="false"  id="continentList" 
			itemRenderer="com.pentagram.view.renderers.RegionsToolListRenderer"  contentBackgroundAlpha="0">
				<s:layout>
					<s:VerticalLayout paddingLeft="4" gap="0" />
				</s:layout>
			</s:List>
			<s:Rect width="100%" height="4">
				<s:fill>
					<s:SolidColor color="0x666666"/>
				</s:fill>
			</s:Rect>
			<s:Rect height="8" />
			<s:Label text="View Options" color="0xffffff" paddingLeft="4" />
			<s:Rect width="100%" height="0.25">
				<s:stroke>
					<s:SolidColorStroke color="0x666666" weight="0.25" />
				</s:stroke>
			</s:Rect>
			<s:CheckBox  label="X-Ray Mode" id="xrayToggle"  includeIn="map,graph" textAlign="center"  height="25" selected="true" color="0xffffff"/>
			<s:CheckBox label="Show Map" textAlign="center" height="25" selected="true" id="mapToggle" includeIn="map" color="0xffffff"   />
			
			<s:Rect width="100%" height="0.25">
				<s:stroke>
					<s:SolidColorStroke color="0x666666" weight="0.25" />
				</s:stroke>
			</s:Rect>			
			<s:HSlider minimum="10" value="25" maximum="100" id="maxRadiusSlider" snapInterval="0.01" stepSize="0.01"/>
			<s:Rect height="10" />
		</s:VGroup>

</s:Group>
