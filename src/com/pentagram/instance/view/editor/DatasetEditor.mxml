<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:vo="com.pentagram.model.vo.*"
		 xmlns:controls="com.pentagram.view.controls.*" 
		 xmlns:renderers="com.pentagram.view.renderers.*"
		 xmlns:datagrid="com.newtriks.display.datagrid.*"
		 xmlns:spark="flex.utils.spark.*">
	
	<fx:Script>
		<![CDATA[
			import com.pentagram.view.renderers.BlankRenderer;
			import com.pentagram.view.renderers.QualityEditor;
			import com.pentagram.view.renderers.QuantityEditor;
			
			import mx.collections.ArrayList;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;
			
			import spark.components.Button;
			import spark.components.DataGroup;
			import spark.components.gridClasses.DefaultGridItemEditor;
			import spark.components.gridClasses.GridColumn;
			import spark.components.gridClasses.GridSelectionMode;
			import spark.events.GridEvent;
			import spark.events.RendererExistenceEvent;
			import spark.skins.spark.DefaultGridHeaderRenderer;

			public function generateDataset():void {
				var column:GridColumn;
				columns.removeAll();
				
				var countryCol:GridColumn  = new GridColumn();
				countryCol.dataField = 'name';
				countryCol.headerText = "Country";
				countryCol.width = 75;	
				countryCol.resizable = true;
				countryCol.sortable = true;
				countryCol.minWidth = 200;
				countryCol.editable = false;
				columns.addItem(countryCol);
				
				if(dataset.time == 1) {
					var years:Array = dataset.range.split(',');
					for(var i:int=years[0];i<=years[1];i++) {
						column  = new GridColumn();
						column.headerText = i.toString();
						if(dataset.type == 1)
							column.itemEditor = new ClassFactory(QuantityEditor);
						else
							column.itemEditor = new ClassFactory(QualityEditor);
						column.dataField = i.toString();
						column.width = 75;	
						column.resizable = true;
						column.sortable = true;
						column.editable = true;
						columns.addItem(column);
					}
				}
				else {
					column = new GridColumn();
					column.headerText = "Value";
					column.editable = true;
					if(dataset.type == 1)
						column.itemEditor = new ClassFactory(QuantityEditor);
					else
						column.itemEditor = new ClassFactory(QualityEditor);
					column.dataField = "value";
					column.width = 75;	
					column.sortable = true;
					columns.addItem(column);
					
					column = new GridColumn();
					column.headerText = '';
					column.editable = false;
					//column.itemRenderer = new ClassFactory(BlankRenderer);
					columns.addItem(column);
				}
				currentState = "showgrid";
				grid.dataProvider = dataset.rows;
				//
			}
			private function handlePropChange(event:Event,prop:String,target:String):void {
				if(dataset.modifiedProps.indexOf(prop) == -1) {
					dataset.modifiedProps.push(prop);
				}
				dataset[prop] = event.target[target];
				dataset.modified = true;
			}
			private function handleScaleChange(event:Event):void {
				if(dataset.modifiedProps.indexOf('multiplier') == -1) {
					dataset.modifiedProps.push('multiplier');
				}
				dataset.multiplier = scaleInput.selectedItem.value as Number;
				dataset.modified = true;
			}
			//DG functions
//			private function handler(event:Event):void
//			{
//				var group:DataGroup = grid.columnHeaderBar.dataGroup;
//				group.addEventListener(RendererExistenceEvent.RENDERER_ADD,handleColumnButtonAdd);
//				group.addEventListener(RendererExistenceEvent.RENDERER_REMOVE,handleColumnButtonRemove);				
//			}
//			private function handleDG(event:Event):void {	
//				var group:DataGroup = grid.columnHeaderGroup .dataGroup;	
//				for (var i:int=0;i<group.numElements;i++) {
//					var b:Button = group.getElementAt(i) as Button;
//					if(b) {
//						b.mouseEnabled = true;
//						b.addEventListener(MouseEvent.CLICK,handleColumnButtonClick);
//					}
//				}
//			} 
//			private function handleColumnButtonAdd(event:RendererExistenceEvent):void {
//				Button(event.renderer).mouseEnabled = true;
//				Button(event.renderer).addEventListener(MouseEvent.CLICK,handleColumnButtonClick);
//			}
//			private function handleColumnButtonRemove(event:RendererExistenceEvent):void {
//				Button(event.renderer).removeEventListener(MouseEvent.CLICK,handleColumnButtonClick);
//			}
//			private function handleColumnButtonClick(event:MouseEvent):void {
//				hscrollValue = grid.scroller.horizontalScrollBar.value;
//				vscrollValue = grid.scroller.verticalScrollBar.value;
//				var sort:Sort = new Sort();
//				sort.fields = [new  SortField(DefaultColumnHeaderRenderer(event.target).data.dataField,false,false,true)];  		
//				if (dataset.rows != null)
//				{
//					dataset.rows.sort = sort;
//					dataset.rows.refresh();
//				}
//				grid.scroller.horizontalScrollBar.value = hscrollValue;
//				grid.scroller.verticalScrollBar.value = vscrollValue;
//			}
			[Bindable] private var scaleFactors:ArrayList = new ArrayList( [{label:'None',value:1},{label:'Thousands',value:1000},
				{label:'Millions',value:1000000},{label:'Billions',value:1000000000},	 
				{label:'Trillions',value:1000000000*100}]);
		]]>
	</fx:Script>
	<s:states>
		<s:State name="prep" />
		<s:State name="showgrid" />
	</s:states>
	<fx:Declarations>
		<fx:Number id="hscrollValue" />
		<fx:Number id="vscrollValue" />
		<vo:Dataset id="dataset" />
		<vo:Client id="client" />
<!--		<spark:LinkedScrollers id="linkedScrolling" component1="{grid}" component2="{countryList}"/>-->
		<s:Fade alphaFrom="0" alphaTo="1" duration="250" id="fadeIn" />
		<s:Fade alphaFrom="1" alphaTo="0" duration="250" id="fadeOut" />
		<s:ArrayList id="units">
			<fx:Array>
				<fx:String>US Dollars ($)</fx:String>
				<fx:String>Euros</fx:String>
				<fx:String>Percent (%)</fx:String>
				<fx:String>None</fx:String>
			</fx:Array>				
		</s:ArrayList>
	</fx:Declarations>

	<s:HGroup verticalAlign="top" width="90%">
		<s:Label text="Data Set Title" width="100" />
		<s:TextInput width="100%" text="{dataset.name}"  change="handlePropChange(event,'name','text')" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="top" width="90%">
		<s:Label text="Description" width="100" />
		<s:TextArea heightInLines="2" width="100%" text="{dataset.description}" change="handlePropChange(event,'description','text')"/>	
	</s:HGroup>		
	
	<s:HGroup verticalAlign="top" width="90%">
		<s:Label text="Units" width="100" />
		<s:DropDownList id="scaleInput" dataProvider="{scaleFactors}" labelField="label" change="handleScaleChange(event)" />
		<s:Label text="of " />
		<s:DropDownList selectedIndex="{units.getItemIndex(dataset.unit)}" dataProvider="{units}" labelField="label" change="handlePropChange(event,'unit','selectedItem')" />
	</s:HGroup>	

	<s:HGroup verticalAlign="top" width="90%" height="100%" gap="0">
		<s:Label text="Data Set" width="100" />
		<s:Rect width="5" />
		<s:Group width="100%" height="100%">
			<s:Rect top="0" left="0" right="0" bottom="0">
				<s:stroke>
					<s:SolidColorStroke color="0xcccccc" weight="2"/>
				</s:stroke>
			</s:Rect>
<!--			<controls:MiGList minWidth="50" left="1" top="2" bottom="2"  sortField="name" contentBackgroundColor="0xffffff"  
			height="100%" id="countryList" labelField="name" headerText="Countries" skinClass="com.pentagram.view.skins.controls.MiGListSkin"  
			sortStarted="hscrollValue=grid.scroller.horizontalScrollBar.value;vscrollValue=grid.scroller.verticalScrollBar.value"
			sortComplete="grid.scroller.horizontalScrollBar.value=hscrollValue;grid.scroller.verticalScrollBar.value=vscrollValue"/>-->
			
			<s:DataGrid  borderVisible="false" left="1" editable="true" 
			selectionMode="{GridSelectionMode.MULTIPLE_CELLS}" right="1" top="2" bottom="2"  
			height="100%" id="grid"><!-- updateComplete="handler(event)" creationComplete="handleDG(event)"-->
				<s:columns>
					<s:ArrayList id="columns" />
				</s:columns>
			</s:DataGrid>
		</s:Group>			
	</s:HGroup>
</s:VGroup>
