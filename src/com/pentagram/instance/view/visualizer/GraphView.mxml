<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:vis="flare.flex.vis.*"
				 xmlns:vo="com.pentagram.model.vo.*"
				 implements="com.pentagram.instance.view.visualizer.IGraphView" 
				 width="100%" height="100%" xmlns:modules="ws.tink.spark.modules.*" contentBackgroundAlpha="0">
	<fx:Script>
		<![CDATA[
			import com.pentagram.util.ViewUtils;
			
			import flare.analytics.optimization.AspectRatioBanker;
			import flare.animate.Scheduler;
			import flare.animate.TransitionEvent;
			import flare.animate.Transitioner;
			import flare.data.DataSet;
			import flare.data.DataSource;
			import flare.data.converters.Converters;
			import flare.data.converters.IDataConverter;
			import flare.display.DirtySprite;
			import flare.scale.ScaleType;
			import flare.util.palette.ColorPalette;
			import flare.util.palette.SizePalette;
			import flare.vis.Visualization;
			import flare.vis.data.Data;
			import flare.vis.data.NodeSprite;
			import flare.vis.operator.OperatorList;
			import flare.vis.operator.encoder.ColorEncoder;
			import flare.vis.operator.encoder.PropertyEncoder;
			import flare.vis.operator.encoder.ShapeEncoder;
			import flare.vis.operator.encoder.SizeEncoder;
			import flare.vis.operator.layout.AxisLayout;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			private var vis:Visualization;

			private var _visdata:Data;
			public function set visdata(d:Data):void {
				_visdata = d;
			}
			public function get visdata():Data {
				return _visdata;
			}
			
			private var _continous:Boolean = false;
			public function set continous(value:Boolean):void{
				_continous = value;
				if(_continous == false) {
					pause();
				}
				else {
					resume();
				}
			}
			
			public function get continous():Boolean{
				return _continous;
			}
			
			//private var banker;
			private var firstPass:Boolean = true;
			public function visualize(arr:Array,...props):void
			{			
				visdata = Data.fromArray(arr);
				
				var axisLayout:AxisLayout;
				var colorEncoder:ColorEncoder;
				var propEncoder:PropertyEncoder;
				var sizeEncoder:SizeEncoder;
				var sizePalette:SizePalette = new SizePalette(1,20);
				
				var prop1:String = props[0] ? props[0].name : null;
				var prop2:String = props[1] ? props[1].name : null;
				var prop3:String = props[2] ? props[2].name : null;
				var prop4:String = props[3] ? props[3].name : null;
				
				if(firstPass) {
					var bounds:Rectangle =  new Rectangle(0, 0, this.width-100, this.height-100);
					
					vis = new Visualization();
					vis.continuousUpdates = true;
					vis.x = 50; 
					vis.y = 20;
					vis.bounds = bounds;
					
					holder.rawChildren.addChild(vis);
					this.addEventListener(ResizeEvent.RESIZE,group1_resizeHandler);
					
					vis.data = _visdata;
					firstPass = false;
					axisLayout = new AxisLayout("data."+prop1, "data."+prop2);	
					propEncoder = new PropertyEncoder({lineAlpha: 1, alpha:0.75, buttonMode: true,scaleX: 1, scaleY: 1, size: 1});
					
					if(prop4) {
						var colorPalette:ColorPalette = new ColorPalette([0xffff5555, 0xff8888ff],[1,2,3,4,5,6,7,8,9,10]);
						new ColorEncoder("data."+prop4, Data.NODES,"fillColor", ScaleType.CATEGORIES,colorPalette);
					}
					else
						colorEncoder = new ColorEncoder("data.color", Data.NODES,"fillColor", ScaleType.CATEGORIES);
					
					if(prop3)
						sizeEncoder = new SizeEncoder("data."+prop3, Data.NODES,sizePalette);
					else 
						sizeEncoder = new SizeEncoder("data.size",Data.NODES);
					vis.operators.add(axisLayout);
					vis.operators.add(propEncoder);
					vis.operators.add(sizeEncoder);
					vis.operators.add(colorEncoder);
					
					
					vis.xyAxes.showBorder = false;
					vis.xyAxes.showXLine = true;
					vis.xyAxes.showYLine = true;
					vis.xyAxes.xAxis.showLines = false;
					vis.xyAxes.yAxis.showLines = false;
					ViewUtils.executeLater(pause);
				}
				else {
					vis.data = _visdata;
					axisLayout = vis.operators.getOperatorAt(0) as AxisLayout;
					axisLayout.xField  = "data."+prop1; axisLayout.yField = "data."+prop2;
					if(prop3) {
						sizeEncoder = vis.operators.getOperatorAt(2) as SizeEncoder;
						sizeEncoder.source = "data."+prop3;
						sizeEncoder.scale.data = _visdata;
					}
					if(prop4) {
						colorEncoder = vis.operators.getOperatorAt(3) as ColorEncoder;
						//colorPalette = new ColorPalette([0xff5555, 0x8888ff]);
						//colorEncoder.palette = colorPalette;
						colorEncoder.source = "data."+prop4;
						colorEncoder.palette = ColorPalette.category(20,[0xff5555, 0x8888ff],1);
						colorEncoder.scale.data = _visdata;
					}
					vis.bounds = new Rectangle(0, 0, this.width-100, this.height-100);
					resume();
					resumeUpdate();
				}
			}
			public function update():void {
				if(!_continous)
					resume();
					
				resumeUpdate();
			}
			public function updateMaxRadius(value:Number):void {
				var sizeEncoder:SizeEncoder = vis.operators.getOperatorAt(2) as SizeEncoder;
				SizePalette(sizeEncoder.palette).maximumSize = value;
				resume();
				this.callLater(function resumeUpdate():void {
					var t:Transitioner = new Transitioner(1);
					t.addEventListener(TransitionEvent.END,handleEnd);
					vis.update(t).play();
				});
				
			}
			protected function group1_resizeHandler(event:ResizeEvent):void {
				if(!firstPass) {
					vis.bounds = new Rectangle(0, 0, this.width-100, this.height-100);
					resume();
					ViewUtils.executeLater(coldUpdate).addEventListener("executed",handleUpdateComplete); 
				}
			}
			private function coldUpdate():void {
				vis.update();
			}
			private function handleUpdateComplete(event:Event):void {
				ViewUtils.executeLater(handleEnd);
			}
			private function handleEnd(event:Event=null):void {
				if(!_continous) {
					pause();
				}
			}
			
			public function unload():void {
				if(vis) {
					Scheduler.instance.remove(vis.rec);
					vis = null;
				}
			}
			public function resume():void {
				DirtySprite.resume();
				Scheduler.instance.play();
				vis.resume();
			}
			public function pause():void {
				DirtySprite.pause();
				Scheduler.instance.pause();
				vis.pause();				
			}
			private function resumeUpdate():void {
				var t:Transitioner = new Transitioner(2.5);
				t.addEventListener(TransitionEvent.END,handleEnd);
				vis.update(t).play();
			}
			public function updateYear(year:int):void {
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
<!--	<s:Group width="100%" height="100%">
		<s:SpriteVisualElement id="holder" width="100%" height="100%"/>	
	</s:Group>-->
	<mx:Canvas id="holder" width="100%" height="100%" />
	
</modules:Module>
