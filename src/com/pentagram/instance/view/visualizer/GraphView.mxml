<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:vis="flare.flex.vis.*"
				 xmlns:vo="com.pentagram.model.vo.*"
				 implements="com.pentagram.instance.view.visualizer.interfaces.IGraphView" 
				 width="100%" height="100%" xmlns:modules="ws.tink.spark.modules.*" contentBackgroundAlpha="0">
	<fx:Script>
		<![CDATA[
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.utils.ViewUtils;
			
			import flare.analytics.optimization.AspectRatioBanker;
			import flare.animate.Scheduler;
			import flare.animate.TransitionEvent;
			import flare.animate.Transitioner;
			import flare.data.DataSet;
			import flare.data.DataSource;
			import flare.data.converters.Converters;
			import flare.data.converters.IDataConverter;
			import flare.display.DirtySprite;
			import flare.scale.ScaleType;
			import flare.util.palette.ColorPalette;
			import flare.util.palette.SizePalette;
			import flare.vis.Visualization;
			import flare.vis.data.Data;
			import flare.vis.data.NodeSprite;
			import flare.vis.operator.OperatorList;
			import flare.vis.operator.encoder.ColorEncoder;
			import flare.vis.operator.encoder.PropertyEncoder;
			import flare.vis.operator.encoder.ShapeEncoder;
			import flare.vis.operator.encoder.SizeEncoder;
			import flare.vis.operator.layout.AxisLayout;
			
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.IAxis;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			

			
			private var  ds1:Dataset;
			private var  ds2:Dataset;
			private var  ds3:Dataset;
			private var  ds4:Dataset;
			
			public function get datasets():Array {
				return [ds1,ds2,ds3,ds4];
			}
						
			private var _continous:Boolean = false;
			public function set continous(value:Boolean):void{
				_continous = value;
				if(_continous == false) {
					pause();
				}
				else {
					resume();
				}
			}
			
			public function get continous():Boolean{
				return _continous;
			}

			//private var banker;
			private var firstPass:Boolean = true;
			private function group1_resizeHandler(event:ResizeEvent):void {
				
			}
			public function visualize(arr:ArrayCollection,...props):void
			{		
				_visdata = arr;
				ds1 = props[0]; ds2 = props[1]; ds3 = props[2]; ds4 = props[3];				
				chart.verticalAxis = createAxis(ds1);
				chart.horizontalAxis = createAxis(ds2);
				mainSeries.dataProvider = _visdata;
				
			}
			private function createAxis(dataset:Dataset):IAxis {
				
				if(dataset.type == 1) {
					var linearAxis:LinearAxis = new LinearAxis();
					linearAxis.title = dataset.name;
					linearAxis.maximum = dataset.max;
					linearAxis.minimum = dataset.min;
					return linearAxis;
				}
				else {
					var categoryAxis:CategoryAxis = new CategoryAxis();
					categoryAxis.title = dataset.name;
					categoryAxis.categoryField = "name";
					categoryAxis.dataProvider = dataset.optionsArray;
					return categoryAxis;
				}
			}
			private var _visdata:ArrayCollection; 
			public function set visdata(d:ArrayCollection):void {
				_visdata = d;
			}
			public function get visdata():ArrayCollection {
				return _visdata;
			}  
			public function update():void {
				
			}
			public function updateMaxRadius(value:Number):void {

				
			}
			public function addCategory(value:Category):void {
				
			}
			
			public function removeCategory(value:Category):void {
				
			}
			public function selectCategory(value:Category):void {
				
			}			
			public function unload():void {

			}
			public function resume():void {

			}
			public function pause():void {
				
			}
			public function updateYear(year:int):void {
				
			}
			public function toggleCategory(visible:Boolean,prop:String):void {
				
			}
			public function toggleOpacity(value:Number):void {

			}
			public function updateSize():void {
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:SeriesInterpolate id="changeEffect" duration="300" />
	</fx:Declarations>
<!--	<s:Group width="100%" height="100%">
		<s:SpriteVisualElement id="holder" width="100%" height="100%"/>	
	</s:Group>-->
<!--	<mx:Canvas id="holder" width="100%" height="100%" />-->
		<mx:BubbleChart width="100%" height="100%" id="chart">
			<mx:series>
				<mx:BubbleSeries id="mainSeries" showDataEffect="{changeEffect}" xField="x" yField="y" radiusField="radius" />
			</mx:series>
		</mx:BubbleChart>
</modules:Module>
