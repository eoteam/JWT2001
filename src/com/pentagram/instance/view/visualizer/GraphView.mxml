<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:vo="com.pentagram.model.vo.*"
				 implements="com.pentagram.instance.view.visualizer.interfaces.IGraphView" 
				 width="100%" height="100%" xmlns:modules="ws.tink.spark.modules.*" contentBackgroundAlpha="0">
	<fx:Script>
		<![CDATA[
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.utils.ViewUtils;
			
			import flare.analytics.optimization.AspectRatioBanker;
			import flare.animate.Scheduler;
			import flare.animate.TransitionEvent;
			import flare.animate.Transitioner;
			import flare.data.DataSet;
			import flare.data.DataSource;
			import flare.data.converters.Converters;
			import flare.data.converters.IDataConverter;
			import flare.display.DirtySprite;
			import flare.scale.ScaleType;
			import flare.util.palette.ColorPalette;
			import flare.util.palette.SizePalette;
			import flare.vis.Visualization;
			import flare.vis.data.Data;
			import flare.vis.data.NodeSprite;
			import flare.vis.operator.OperatorList;
			import flare.vis.operator.encoder.ColorEncoder;
			import flare.vis.operator.encoder.PropertyEncoder;
			import flare.vis.operator.encoder.ShapeEncoder;
			import flare.vis.operator.encoder.SizeEncoder;
			import flare.vis.operator.layout.AxisLayout;
			
			import mx.charts.BarChart;
			import mx.charts.BubbleChart;
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.BarSeries;
			import mx.charts.series.BubbleSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			

			
			private var  ds1:Dataset;
			private var  ds2:Dataset;
			private var  ds3:Dataset;
			private var  ds4:Dataset;
			
			public function get datasets():Array {
				return [ds1,ds2,ds3,ds4];
			}
						
			private var _continous:Boolean = false;
			public function set continous(value:Boolean):void{
				_continous = value;
				if(_continous == false) {
					pause();
				}
				else {
					resume();
				}
			}
			
			public function get continous():Boolean{
				return _continous;
			}

			//private var banker;
			private var firstPass:Boolean = true;

			
			private function group1_resizeHandler(event:ResizeEvent):void {
				
			}
			private var mainSeries:BubbleSeries;
			//private var chart:BubbleChart;
			public function visualize(arr:ArrayCollection,...props):void
			{		
				if(firstPass) {
					
					//chart  = new BubbleChart();
					
					//chart.percentHeight = chart.percentWidth = 100;
					chart.dataProvider = _visdata;
					
					ds1 = props[0]; ds2 = props[1]; ds3 = props[2]; ds4 = props[3];				
					chart.verticalAxis  = vAxisRenderer.axis = createAxis(ds1);
					chart.horizontalAxis   = hAxisRenderer.axis = createAxis(ds2);
					chart.verticalAxisRenderers = [vAxisRenderer]; 
					chart.horizontalAxisRenderers = [hAxisRenderer];
					
					var mySeries:Array=new Array();
					mainSeries = new BubbleSeries();
					//mainSeries.setStyle('showDataEffect',changeEffect);
					mainSeries.xField = 'x';
					mainSeries.yField = 'y';
					mainSeries.radiusField = 'radius';
					mySeries.push(mainSeries);
					
					chart.series = mySeries;
					
					//this.addElement(chart);
					firstPass = false;
				}
				
				
//				
//				myChart = new BarChart();
//				myChart.showDataTips = true;
//				myChart.dataProvider = expenses;
//				
//				// Define the category axis.
//				var vAxis:CategoryAxis = new CategoryAxis();
//				vAxis.categoryField = "Month" ;
//				vAxis.dataProvider =  expenses;
//				myChart.verticalAxis = vAxis;
//				
//				// Add the series.
//				var mySeries:Array=new Array();
//				series1 = new BarSeries();
//				series1.xField="Profit";
//				series1.yField="Month";
//				series1.displayName = "Profit";
//				mySeries.push(series1);
//				
//				series2 = new BarSeries();
//				series2.xField="Expenses";
//				series2.yField="Month";
//				series2.displayName = "Expenses";
//				mySeries.push(series2);
//				
//				myChart.series = mySeries;
//				
//				addElement(myChart);
			}
			[Bindable]
			public var expenses:ArrayCollection = new ArrayCollection([
				{Month:"Jan", Profit:2000, Expenses:1500},
				{Month:"Feb", Profit:1000, Expenses:200},
				{Month:"Mar", Profit:1500, Expenses:500}
			]);
			
			public var myChart:BarChart;
			public var series1:BarSeries;
			public var series2:BarSeries;
		//	public var legend1:Legend;

			private function createAxis(dataset:Dataset):IAxis {
				
				if(dataset.type == 1) {
					var linearAxis:LinearAxis = new LinearAxis();
					linearAxis.title = dataset.name;
					linearAxis.maximum = dataset.max;
					linearAxis.minimum = dataset.min;
					return linearAxis;
				}
				else {
					var categoryAxis:CategoryAxis = new CategoryAxis();
					categoryAxis.title = dataset.name;
					categoryAxis.categoryField = "name";
					categoryAxis.dataProvider = new ArrayCollection(ViewUtils.vectorToArray(dataset.optionsArray));
					return categoryAxis;
				}
			}
			private var _visdata:ArrayCollection; 
			public function set visdata(d:ArrayCollection):void {
				_visdata = d;
			}
			public function get visdata():ArrayCollection {
				return _visdata;
			}  
			public function update():void {
				
			}
			public function updateMaxRadius(value:Number):void {

				
			}
			public function addCategory(value:Category):void {
				
			}
			
			public function removeCategory(value:Category):void {
				
			}
			public function selectCategory(value:Category):void {
				
			}			
			public function unload():void {

			}
			public function resume():void {

			}
			public function pause():void {
				
			}
			public function updateYear(year:int):void {
				
			}
			public function toggleCategory(visible:Boolean,prop:String):void {
				
			}
			public function toggleOpacity(value:Number):void {

			}
			public function updateSize():void {
				
			}
		]]>
	</fx:Script>
	<fx:Style>

		@namespace mx "library://ns.adobe.com/flex/mx";
		
		mx|BubbleChart {
			fontFamily:FlamaBookMx;
			fontSize:12;
			color:#000000;
		}
		.axisTitle {
			fontFamily: FlamaBoldMx;
			embedFonts:true;
			fontSize:14;
		}
	</fx:Style>
	<fx:Declarations>
		<mx:SeriesInterpolate id="changeEffect" duration="1000" elementOffset="0"  minimumElementDuration="0" />

			<mx:AxisRenderer  id="vAxisRenderer"  
			axisTitleStyleName="axisTitle" tickPlacement="none" placement="left"
			tickLength="0" canDropLabels="true" labelRotation="0" showLabels="true">
				<mx:axisStroke>
					<s:SolidColorStroke color="0" weight="0.5" />
				</mx:axisStroke>
				<mx:tickStroke>
					<s:SolidColorStroke color="0" weight="0.5" />
				</mx:tickStroke>
			</mx:AxisRenderer>

			<mx:AxisRenderer id="hAxisRenderer"  
			 axisTitleStyleName="axisTitle" tickPlacement="none" placement="bottom"
			 tickLength="0" canDropLabels="true" labelRotation="0" showLabels="true"> 
				<mx:axisStroke>
					<s:SolidColorStroke color="0" weight="0.5" />
				</mx:axisStroke>
				<mx:tickStroke>
					<s:SolidColorStroke color="0" weight="0.5" />
				</mx:tickStroke>
			</mx:AxisRenderer>
	</fx:Declarations>
	<mx:BubbleChart width="100%" height="100%"  showDataTips="true" id="chart">
		
	</mx:BubbleChart>
</modules:Module>
