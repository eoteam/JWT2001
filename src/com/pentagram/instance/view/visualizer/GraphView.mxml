<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:vo="com.pentagram.model.vo.*" 
				 xmlns:chart="com.pentagram.instance.view.visualizer.chart.*"
				 implements="com.pentagram.instance.view.visualizer.interfaces.IGraphView"
				 xmlns:modules="ws.tink.spark.modules.*" 
				 creationComplete="module1_creationCompleteHandler(event)"
				 width="100%" height="100%" 
				 contentBackgroundAlpha="0" xmlns:views="com.pentagram.instance.view.visualizer.views.*"  >
	<fx:Script>
		<![CDATA[
			import mx.charts.HitData;
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.model.vo.NormalizedVO;
			import com.pentagram.utils.ViewUtils;
			
			import mx.charts.AxisRenderer;
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.BubbleSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			
			private var  ds1:Dataset;
			private var  ds2:Dataset;
			private var  ds3:Dataset;
			private var  ds4:Dataset;
			[Bindable] private var	 maxRadius:Number = 25;
			private var categories:Array;
			private var firstLoad:Boolean = true;
			
			
			public function get datasets():Array {
				return [ds1,ds2,ds3,ds4];
			}
			private var _continous:Boolean = false;
			public function set continous(value:Boolean):void{
				_continous = value;
				if(_continous == false) {
					pause();
				}
				else {
					resume();
				}
			}
			
			public function get continous():Boolean{
				return _continous;
			}

			
			private var firstPass:Boolean = true;
			
			public function visualize(maxRadius:Number,arr:ArrayCollection,...props):void {
				ds1 = props[0]; ds2 = props[1]; ds3 = props[2]; ds4 = props[3];
				
				_visdata = arr;
				this.maxRadius = maxRadius;		
				if(!firstLoad) {
					doVisualize();
				}
			}
			private function doVisualize():void {	
				chart.newXAxis = hAxisRenderer;
				chart.newYAxis = vAxisRenderer;
				
				chart.horizontalAxis   = hAxisRenderer.axis = createAxis(ds1,"x");	
				chart.verticalAxis  = vAxisRenderer.axis = createAxis(ds2,"y");
				//if(ds3)
				//	chart.radiusAxis = createRadiusAxis(ds3);
				chart.verticalAxisRenderers = [vAxisRenderer]; 
				chart.horizontalAxisRenderers = [hAxisRenderer];
				
				firstPass = firstLoad = false;	
			}
			private function createAxis(dataset:Dataset,axis:String):IAxis {
				
				if(dataset.type == 1) {
					var linearAxis:LinearAxis = new LinearAxis();
					linearAxis.title = dataset.name;
					linearAxis.maximum = dataset.max + Math.abs(dataset.max*.1);
					linearAxis.minimum = dataset.min - Math.abs(dataset.min*.1);
					return linearAxis;
				}
				else {
					var categoryAxis:CategoryAxis = new CategoryAxis();
					categoryAxis.title = dataset.name;
					categoryAxis.categoryField = "name";
					categoryAxis.dataProvider = ViewUtils.vectorToArray(dataset.optionsArray);
					//categoryAxis.dataProvider = new ArrayCollection(ViewUtils.vectorToArray(dataset.optionsArray));
					return categoryAxis;
				}
			}
			private function createRadiusAxis(dataset:Dataset):IAxis {
				var axis:LinearAxis = new LinearAxis();
				axis.minimum = 0;
				axis.maximum = 100;
				//axis.maximumLabelPrecision = 4;
				return axis;
			}
			[Bindable] private var _visdata:ArrayCollection; 
			public function set visdata(d:ArrayCollection):void {
				_visdata = d;
			}
			public function get visdata():ArrayCollection {
				return _visdata;
			}  
			public function update():void {
				chart.dataProvider = _visdata;
			}
			public function updateMaxRadius(value:Number):void {
				this.maxRadius = value;
			}
			public function addCategory(value:Category,count:int):void {
				for each(var item:NormalizedVO in _visdata) {
					if(item.category == value.name)
						item.radius = item.prevRadius;
				}				
			}
			
			public function removeCategory(value:Category,count:int):void {
				for each(var item:NormalizedVO in _visdata) {
					if(item.category == value.name)
						item.radius = 0;
				}					
			}
			public function selectCategory(value:Category):void {
				for each(var item:NormalizedVO in _visdata) {
					if(item.category != value.name) {
						item.radius = 0;
					}
					else if(item.radius == 0)
						item.radius = item.prevRadius;
				}
			}			
			public function unload():void {

			}
			public function resume():void {

			}
			public function pause():void {
				
			}
			public function updateYear(year:int):void {
				
			}
			public function toggleOpacity(value:Number):void {
				for each(var item:NormalizedVO in _visdata) {
					item.alpha = value;
				}
			}
			public function updateSize():void {
				
			}

			protected function module1_creationCompleteHandler(event:FlexEvent):void
			{
				this.doVisualize();
			}
			public function dtFunc(hd:HitData):String {
				var item:NormalizedVO = hd.item as NormalizedVO;
				var result:String = '';
				result +=  ds1.name + ": " + item.x + "\n";
				result +=  ds2.name + ": " + item.y + "\n";
				if(ds3) result +=  ds3.name + ": " + Math.round(item.radius*ds3.max) + "\n";
				if(ds4) result +=  ds4.name + ": " + item.category;
				return result;
			}
			public function selectAllCategories():void {
				
			}
		]]>
	</fx:Script>
	<fx:Style>

		@namespace mx "library://ns.adobe.com/flex/mx";
		
		mx|BubbleChart {
			fontFamily:FlamaBook;
			fontSize:12;
			color:#000000;
		}
		.axisTitle {
			fontFamily: FlamaBold;
			embedFonts:true;
			fontSize:14;
		}
	</fx:Style>
	<fx:Declarations>
		
		<mx:SeriesInterpolate id="changeEffect" duration="1000" elementOffset="0"  minimumElementDuration="0" />
		
		<mx:AxisRenderer  id="vAxisRenderer" axisTitleStyleName="axisTitle" tickPlacement="none" placement="left"
		tickLength="0" canDropLabels="true"  showLabels="true" labelAlign="left" labelRotation="0"	>
			<mx:axisStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:axisStroke>
			<mx:tickStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:tickStroke>
		</mx:AxisRenderer>
		
		<mx:AxisRenderer id="hAxisRenderer"   labelAlign="left"
		 axisTitleStyleName="axisTitle" tickPlacement="none" placement="bottom"
		 tickLength="0" canDropLabels="true" labelRotation="0" showLabels="true"> 
			<mx:axisStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:axisStroke>
			<mx:tickStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:tickStroke>
		</mx:AxisRenderer>
	</fx:Declarations>
	<views:ViewBubbleChart dataProvider="{_visdata}" width="100%" height="100%" id="chart" showDataTips="true" dataTipFunction="{dtFunc}"
	dataTipRenderer="com.pentagram.instance.view.visualizer.renderers.GraphDataTip" gutterTop="-15" paddingTop="20" gutterRight="-15" paddingRight="18">
		<views:series>
			<mx:BubbleSeries maxRadius="{maxRadius}" radiusField="radius" xField="x" yField="y" showDataEffect="{changeEffect}"  id="mainSeries" 
			 itemRenderer="com.pentagram.instance.view.visualizer.renderers.BubbleRenderer"/>
		</views:series>
		<views:backgroundElements />
	</views:ViewBubbleChart>

</modules:Module>
