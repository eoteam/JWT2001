<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:vo="com.pentagram.model.vo.*" 
				 xmlns:chart="com.pentagram.instance.view.visualizer.chart.*"
				 implements="com.pentagram.instance.view.visualizer.interfaces.IGraphView"
				 xmlns:modules="ws.tink.spark.modules.*" 
				 creationComplete="creationCompleteHandler(event)"
				 width="100%" height="100%" 
				 contentBackgroundAlpha="0" xmlns:views="com.pentagram.instance.view.visualizer.views.*"  >
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pentagram.instance.view.visualizer.renderers.BubbleRenderer;
			import com.pentagram.instance.view.visualizer.renderers.RendererInfo;
			
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.items.BubbleSeriesItem;
			import mx.collections.ArrayList;
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.model.vo.NormalizedVO;
			import com.pentagram.utils.ViewUtils;
			
			import mx.charts.AxisRenderer;
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			
			import mx.charts.chartClasses.IAxis;
			import mx.charts.series.BubbleSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			
			private var  ds1:Dataset;
			private var  ds2:Dataset;
			private var  ds3:Dataset;
			private var  ds4:Dataset;
			
			[Bindable] private var maxRadius:Number = 25;
			private var currentYear:String;
			private var opacity:Boolean = true;
			
			private var categories:Array;
			private var firstPass:Boolean = true;
	
			public function get datasets():Array {
				return [ds1,ds2,ds3,ds4];
			}
			public function visualize(maxRadius:Number,arr:ArrayCollection,...props):void {
				ds1 = props[0]; ds2 = props[1]; ds3 = props[2]; ds4 = props[3];
				_visdata = arr;
				this.maxRadius = maxRadius;		
				if(!firstPass) {
					doVisualize();
				}
			}
			protected function doVisualize():void {	
				chart.newXAxis = hAxisRenderer;
				chart.newYAxis = vAxisRenderer;

				if(ds1&&ds2) {
					for each(var item:NormalizedVO in _visdata) {
						generateContent(item);
					}
					chart.horizontalAxis   = hAxisRenderer.axis = createAxis(ds1);	
					chart.verticalAxis  = vAxisRenderer.axis = createAxis(ds2);
		
					hLabel.text = ds1.name;
					vLabel.text = ds2.name;
					
					hAxisRenderer.visible = ds1.id == -2?false:true;
					vAxisRenderer.visible = ds2.id == -2?false:true;
					
					chart.verticalAxisRenderers = [vAxisRenderer]; 
					chart.horizontalAxisRenderers = [hAxisRenderer];
				
					firstPass = false;
				}
			}
			private function createAxis(dataset:Dataset):IAxis {
				
				if(dataset.type == 1) {
					var linearAxis:LinearAxis = new LinearAxis();
					linearAxis.title = '';
					linearAxis.maximum = dataset.max + Math.abs(dataset.max*.1);
					linearAxis.minimum = dataset.min - Math.abs(dataset.min*.1);
					return linearAxis;
				}
				else if(dataset.id != -2) {
					var categoryAxis:CategoryAxis = new CategoryAxis();
					categoryAxis.title = '';
					categoryAxis.categoryField = "name";
					categoryAxis.dataProvider = ViewUtils.vectorToArray(dataset.optionsArray);
					return categoryAxis;
				}
				else {
					linearAxis = new LinearAxis();
					linearAxis.title = '';
					linearAxis.maximum = linearAxis.minimum = 1;
					return linearAxis;
				}
			}
			private function createRadiusAxis(dataset:Dataset):IAxis {	
				var axis:LinearAxis = new LinearAxis();
				axis.minimum = 0;
				axis.maximum = 100;
				//axis.maximumLabelPrecision = 4;
				return axis;
			}
			
			[Bindable] private var _visdata:ArrayCollection; 
			public function set visdata(d:ArrayCollection):void {
				_visdata = d;
			}
			public function get visdata():ArrayCollection {
				return _visdata;
			}  
			public function update():void {
				chart.dataProvider = _visdata;
				if(ds1.type == 1) {
					LinearAxis(chart.horizontalAxis).minimum = ds1.min - Math.abs(ds1.min*.1);
					LinearAxis(chart.horizontalAxis).maximum = ds1.max + Math.abs(ds1.max*.1);
				}
				if(ds2.type == 1) {
					LinearAxis(chart.verticalAxis).minimum = ds2.min - Math.abs(ds2.min*.1);
					LinearAxis(chart.verticalAxis).maximum = ds2.max + Math.abs(ds2.max*.1);;				
				}
			}
			public function updateMaxRadius(value:Number):void {
				this.maxRadius = value;
			}
			public function addCategory(value:Category,count:int):void {
				for each(var item:NormalizedVO in _visdata) {
					if(item.category == value.name)
						item.radius = item.prevRadius;
				}				
			}
			public function removeCategory(value:Category,count:int):void {
				for each(var item:NormalizedVO in _visdata) {
					if(item.category == value.name)
						item.radius = 0;
				}					
			}
			public function selectCategory(value:Category):void {
				for each(var item:NormalizedVO in _visdata) {
					if(item.category != value.name) {
						item.radius = 0;
					}
					else if(item.radius == 0)
						item.radius = item.prevRadius;
				}
			}			
			public function resume():void {

			}
			public function pause():void {
				
			}
			public function updateYear(year:String):void {
				currentYear = year;
				for each(var item:NormalizedVO in _visdata) {
					generateContent(item);
				}
			}
			public function toggleOpacity(value:Number):void {
				opacity = value==1?false:true;
				for each(var item:NormalizedVO in _visdata) {
					item.alpha = value;
				}
			}
			public function updateSize():void {
				
			}
			public function get viewOptions():Array {
				return [maxRadius,opacity,currentYear];
			}
			public function clearTooltips():void {
				for each(var item:BubbleSeriesItem in this.mainSeries.items) {
					if(item.itemRenderer)
						BubbleRenderer(item.itemRenderer).toggleInfo(false);
				}
			}	
			public function selectAllCategories():void {
				for each(var item:NormalizedVO in _visdata) {
					item.radius = item.prevRadius;
				}
			}
			public function clear():void {
				chart.dataProvider = null;
			}
			public function get didVisualize():Boolean {
				return !firstPass;
			}
			private function creationCompleteHandler(event:FlexEvent):void {
				this.doVisualize();
			}
			public function dtFunc(hd:HitData):String {	
				var item:NormalizedVO = hd.item as NormalizedVO;
				return item.content;
			}
			private function generateContent(item:NormalizedVO):void {
				var result:String = "<TextFlow xmlns='http://ns.adobe.com/textLayout/2008'><p fontFamily='FlamaBook'>";
				result += ds1.id > -2 ? '<span color="#cccccc">'+ds1.name + ':  </span><span color="#ffffff">' + item.x + '</span><br/>' : '';
				result += ds2.id > -2 ? '<span color="#cccccc">'+ds2.name + ':  </span><span color="#ffffff">' + item.y + '</span>' : '';
				if(ds3 && ds3.id > -2) result += '<br/><span color="#cccccc">'+ds3.name + ':  </span><span color="#ffffff">' + item.radiusValue + '</span>';			
				result += "</p></TextFlow>";	
				item.content = result;
			}
			public function selectCountries(countries:Vector.<Object>):void {
				for each(var r:BubbleSeriesItem in mainSeries.items) {
					var item:NormalizedVO = r.item as NormalizedVO;
					if(countries.indexOf(item.country) != -1 && item.alpha != 1) {
						TweenLite.killTweensOf(item,false);
						TweenLite.to(item,0.5,{hexColors:{textColor:0xffffff},alpha:1});
						if(r.itemRenderer)
							BubbleRenderer(r.itemRenderer).toggleInfo(true);
					}
					else if(item.alpha != 0.2) { 
						TweenLite.killTweensOf(item);
						TweenLite.to(item,0.5,{hexColors:{textColor:item.color},alpha:0.2});
						if(r.itemRenderer)
							BubbleRenderer(r.itemRenderer).toggleInfo(false);
					}					
				}
			}

			protected function chart_itemClickHandler(event:ChartItemEvent):void
			{
				var renderer:BubbleRenderer = event.hitData.chartItem.itemRenderer as BubbleRenderer;
				if(renderer)
					renderer.toggleInfo(true);
			}
			

		]]>
	</fx:Script>
	<fx:Style>

		@namespace mx "library://ns.adobe.com/flex/mx";
		
		mx|BubbleChart {
			fontFamily:FlamaBook;
			fontSize:12;
			color:#000000;
		}
		.axis {
			fontFamily: FlamaBook;
			embedFonts:true;
			fontSize:14;
			tickPlacement:none;
			tickLength:0;
			canDropLabels:true;
			labelAlign:left;
			labelRotation:0;
			showLabel:true;
			canStagger:false;
		}
	</fx:Style>
	<fx:Declarations>
		
		<mx:SeriesInterpolate id="changeEffect" duration="1000" elementOffset="0"  minimumElementDuration="0"/>
		
		<mx:AxisRenderer  id="vAxisRenderer" styleName="axis">
			<mx:axisStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:axisStroke>
			<mx:tickStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:tickStroke>
		</mx:AxisRenderer>
		
		<mx:AxisRenderer id="hAxisRenderer" styleName="axis">
			<mx:axisStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:axisStroke> 
			<mx:tickStroke>
				<s:SolidColorStroke color="0" weight="0.5" />
			</mx:tickStroke>
		</mx:AxisRenderer>
	</fx:Declarations>
	<views:ViewBubbleChart dataProvider="{_visdata}" top="0" bottom="0" left="0" right="0"
						   gutterLeft="50" 
						   gutterRight="50" 
						   gutterBottom="50" 
						   gutterTop="50"					   
	id="chart" showDataTips="true" dataTipFunction="{dtFunc}"
	itemClick="chart_itemClickHandler(event)" 
	dataTipRenderer="com.pentagram.instance.view.visualizer.renderers.GraphDataTip">
		<views:series>
			<mx:BubbleSeries maxRadius="{maxRadius}" radiusField="radius"   xField="x" yField="y" showDataEffect="{changeEffect}"  id="mainSeries" 
			 itemRenderer="com.pentagram.instance.view.visualizer.renderers.BubbleRenderer" selectable="true"  horizontalCenter="0" verticalCenter="0"  />
		</views:series>
		<views:backgroundElements>
		<!--	<s:Group>
				<s:Rect width="100%" height="100%">
					<s:stroke>
						<s:SolidColorStroke weight="1" />
					</s:stroke>
				</s:Rect>				
			</s:Group>-->
		</views:backgroundElements>
	</views:ViewBubbleChart>
	
	<s:Label fontFamily="FlamaBold" id="hLabel" horizontalCenter="0" bottom="2" />
	<s:Label fontFamily="FlamaBold" id="vLabel"  verticalCenter="0" left="2" rotation="-90" />

</modules:Module>
