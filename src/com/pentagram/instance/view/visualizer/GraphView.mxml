<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"   creationComplete="group1_creationCompleteHandler(event)"
				 xmlns:vis="flare.flex.vis.*" width="100%" height="100%" xmlns:vo="com.pentagram.model.vo.*"  
				 >
	<fx:Script>
		<![CDATA[
			import flare.analytics.optimization.AspectRatioBanker;
			import flare.animate.Transitioner;
			import flare.data.DataSet;
			import flare.data.DataSource;
			import flare.data.converters.Converters;
			import flare.data.converters.IDataConverter;
			import flare.scale.ScaleType;
			import flare.vis.Visualization;
			import flare.vis.data.Data;
			import flare.vis.data.NodeSprite;
			import flare.vis.operator.OperatorList;
			import flare.vis.operator.encoder.ColorEncoder;
			import flare.vis.operator.encoder.PropertyEncoder;
			import flare.vis.operator.encoder.ShapeEncoder;
			import flare.vis.operator.encoder.SizeEncoder;
			import flare.vis.operator.layout.AxisLayout;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			private var vis:Visualization;
		
			public var data:Data;
			private function group1_creationCompleteHandler(event:FlexEvent):void
			{
//				var conv:IDataConverter = Converters.lookup("json");
//				var ds:DataSet = conv.read(dataset.data);
//				visualize(Data.fromDataSet(ds));
			}
			Â private var banker:AspectRatioBanker;
			public function visualize(arr:Array,prop1:String,prop2:String,prop3:String):void
			{
				var bounds:Rectangle =  new Rectangle(0, 0, this.width-100, this.height-100);
//				var timeline:OperatorList = new OperatorList(
//					// the banker automatically selects the visualization
//					// bounds to optimize the perception of trends in the chart
//					banker = new AspectRatioBanker("data."+prop1, true,
//						bounds.width, bounds.height),
//					new AxisLayout("data."+prop1, "data."+prop2),
//					new ColorEncoder("data.color", Data.NODES,
//						"fillColor", ScaleType.CATEGORIES),
//					new PropertyEncoder({
//						lineAlpha: 1, alpha: 0.8, buttonMode: true,
//						scaleX: 1, scaleY: 1, size: 1
//					}),
//					new PropertyEncoder({lineWidth:2}, Data.EDGES)
//				);
//				timeline[1].xScale.flush = true; // tight margins on timeline

				data = Data.fromArray(arr);

				vis = new Visualization(data);
				vis.continuousUpdates = true;
				
				var axisLayout:AxisLayout = new AxisLayout( "data."+prop1, "data."+prop2);
				var colorEncode:ColorEncoder = new ColorEncoder("data.color", Data.NODES,"fillColor", ScaleType.CATEGORIES);
				var propEncoder:PropertyEncoder	= new PropertyEncoder({lineAlpha: 1, alpha: 1, buttonMode: true,scaleX: 1, scaleY: 1, size: 1});
				var sizeEncoder:SizeEncoder = new SizeEncoder("data."+prop3, Data.NODES);
				
				vis.operators.add(axisLayout);
				vis.operators.add(colorEncode);
				vis.operators.add(propEncoder);
				vis.operators.add(sizeEncoder);
				vis.x = 50; 
				vis.y = 20;
				vis.bounds = bounds;
				
				holder.addChild(vis);
				
				
				//effectively only hides top and right borders
				vis.xyAxes.showBorder = false;
				// show bottom border
				vis.xyAxes.showXLine = true;
				// show left border
				vis.xyAxes.showYLine = true;
				// hide vertical grid lines (along x axis)
				vis.xyAxes.xAxis.showLines = false;
				// hide horizontal grid lines (along y axis)
				vis.xyAxes.yAxis.showLines = false;
				vis.update();
				this.addEventListener(ResizeEvent.RESIZE,group1_resizeHandler);
			}
			public function update():void {
				vis.update(new Transitioner(1)).play();
			}
			protected function group1_resizeHandler(event:ResizeEvent):void
			{
				
				vis.bounds = new Rectangle(0, 0, this.width-100, this.height-100);
				vis.update();
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<vo:Dataset id="dataset" />
	</fx:Declarations>
	<s:SpriteVisualElement id="holder"  width="100%" height="100%"  />
</s:Group>
