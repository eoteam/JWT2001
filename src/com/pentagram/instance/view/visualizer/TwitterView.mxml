<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:modules="ws.tink.spark.modules.*" 
				xmlns:views="com.pentagram.instance.view.visualizer.views.*"
				implements="com.pentagram.instance.view.visualizer.interfaces.ITwitterView"
				creationComplete="creationCompleteHandler(event)" resize="updateSize()"
				width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.greensock.TweenNano;
			import com.pentagram.controller.Constants;
			import com.pentagram.instance.view.visualizer.renderers.TwitterRenderer;
			import com.pentagram.instance.view.visualizer.views.TwitterPacking;
			import com.pentagram.model.vo.Client;
			import com.pentagram.model.vo.TwitterTopic;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			private var baseURL:String = "http://search.twitter.com/search.json?q=";
			private var counter:int = 1;
			private var pageTotal:int = 4;
			private var maxRadius:Number = 25;
			private var opacity:Boolean = true;
			private var arr:Array = [];
			private var _client:Client;
			private var text:String = '';
			private var firstPass:Boolean = true;
			private var common:Array = ["the","be","to","of","and","a","in","that","have","I","it","for","not","on","with","he","as","you","do",
				"at","this","but","his","by","from","they","we","say","her","she","or","an","will","my","one","all","would","there",
				"their","what","so","up","out","if","about","who","get","which","go","me","when","make","can","like","time","no",
				"just","him","know","take","person","into","year","your","good","some","could","them","see","other","than","then",
				"now","look","only","come","its","over","think","also","back","after","use","two","how","our","	","first","well",
				"way","even","new","want","because","any","these","give","day","most","us",
				
				"http","bit","ly","rt","www","com","here","lots","ever","are","more","is","why","it's","was","were","had","did","has",
				"quot","amp","'s"];
			
			protected var resizeFlag:Boolean = false
				
			private function httpservice1_resultHandler(event:ResultEvent):void
			{
				var o:Object  = JSON.decode(event.result.toString());
				arr = arr.concat(o.results);
				for each(var item:Object in o.results) {
					text+= item.text + "\n";
				}
				if(counter < pageTotal) {
					service.url = baseURL+_client.shortname+"&lang=en&rpp=100&page="+counter.toString();
					service.send();
				}
				else  {	
					var params:Object = new Object();
					params.action = "getLinks"
					params.text = text;
					linksService.url =  Constants.DB_EXECUTE;
					linksService.send(params);
				}
				counter++;
			}
			public function updateSize():void {
				resizeFlag = true;
				this.invalidateDisplayList();
			}
			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w,h);
				if(resizeFlag) {
					resizeFlag = false;
					handleResize();
				}
			}
			private function handleResize(event:Event=null):void {
				for (var i:int=0;i<holder.numElements;i++) {
					var pack:TwitterPacking = holder.getElementAt(i) as TwitterPacking;
					pack.percentHeight = pack.percentWidth = 100;
					pack.draw();			
				}
			}
			private function countWords(text:String,p:int):Array
			{
				var m:Array = new Array();
				var m1:Array = new Array();
				var N:Array = new Array ();
				var NN:int=0;
				var Numwords:int = 0;
				var ch:int=p;
				var k1:int;var k:int;var j:int;
				var A:String = text;			// original message 
				var B:String = "";
				var C:String="";
				var str:String=" ";
				
				A =" " + A+" ";
				A = A.toUpperCase();		// changes all alphas to Upper case
				if(ch==0) {
					for (var i:int=0;i<=A.length-1;i++)
					{	
						k= A.charCodeAt(i);
						if ( ((k>64) && (k<5000)) || (k==32) ) // ((k>64) && (k<91)) || 
						{	
							C=C+A.charAt(i);
						}
						else 
						{	
							C=C+" ";
						}
					}
					A=C;
				}
				else
				{
					for (i=0;i<=A.length-1;i++)
					{	k=A.charCodeAt(i);
						if (k>31)
						{	
							C=C+A.charAt(i);
						}
						else 
						{	
							C=C+" ";
						}
					}
					A=C;	
				}
				for (i=1;i<=A.length;i++)		//  trims leading spaces and multiple spaces
				{	
					if ((!(A.charAt(i)==" ")) || (!(A.charAt(i-1)==" ")))
					{
						B=B + A.charAt(i);
					}
				}
				//count.result1.value=B;
				B=B+" ";				// makes sure there is a space at end	
				k=0; 
				
				for (i=0;i<=B.length;i++)
				{	
					k1 = B.indexOf(str,k);
					if (k1==-1)		//end of string B
					{	Numwords=i-1;
						break;
					}
					var w:String = B.substring(k,k1);			
					m[i+1]= w;// places all the words into an array m
					k=k1+1;
				}
				//count.result1.value=B; 
				C="";
				
				for (i=1;i<=Numwords; i++)	// Numwords is total number of words
				{	
					if (!(m[i]==""))	// only looks at m1 words that have not been processed before (not empty)
					{	
						NN=NN+1;			//unique word stored in m1 array
						m1[NN]=m[i];
						N[NN]=1;			// initialize counter for word
						for (j=i+1;j<=Numwords+1;j++)	//counts and makes m1 elements with unique word empty.
						{	
							if (m1[NN]==m[j])
							{	
								N[NN]=N[NN]+1;
								m[j]="";
							}
						}	
					}	
				}	
				for (i=1;i<=NN-1;i++)
				{	
					for (j=i+1;j<=NN;j++)
					{	
						if (N[i]<N[j])
						{	
							var temp:String = m1[i];
							m1[i]=m1[j];
							m1[j]=temp;
							temp=N[i];
							N[i]=N[j];
							N[j]=temp;
						}
					}
				}
				//C=C+"Unique:" + NN+"  Total:" + Numwords+"\n";
				//C=C+"Freq.\tWord\n";
				var results:Array = [];
				for (i=1;i<=NN;i++)		// sets up C for showing
				{	
					//trace(N[0],N[i],N[0]*0.1);
					if(common.indexOf(m1[i].toLowerCase()) == -1 && m1[i].length > 1 && N[i] >= N[1]*0.01) {
						var topic:TwitterTopic = new TwitterTopic();
						topic.count = N[i];
						topic.value = m1[i];
						results.push(topic);
					}
					//C=C + N[i]+ "\t" + m1[i] + "\n";
				}
				//area2.text = C;
				return results;
			}	
			private function creationCompleteHandler(event:FlexEvent):void
			{
				firstPass = false;
				if(_client)
					doVisualize();
			}
			public function update():void {
				
			}
			public function set client(value:Client):void {
				if(_client != value) {
					_client = value;
					if(!firstPass)
						doVisualize();
				}
			}
			private function doVisualize():void {
				counter = 1;
				common.push(_client.shortname.toLowerCase());
				common.push("@"+_client.shortname.toLowerCase());
				common.push("@"+_client.shortname.toLowerCase()+":");
				common.push("@"+_client.shortname.toLowerCase()+".");
				service.url = baseURL+_client.shortname+"&lang=en&rpp=100&page=1";
				service.send();
				firstPass = false;
			}
			public function get viewOptions():Array {
				return [maxRadius,opacity,0];
			}
			public function toggleOpacity(value:Number):void {
				opacity = value==1?false:true;
				for (var i:int=0;i<holder.numElements;i++) {
					var pack:TwitterPacking = holder.getElementAt(i) as TwitterPacking;
					for (var j:int=0;j<pack.numChildren;j++) {
						var renderer:TwitterRenderer =  pack.getChildAt(j) as TwitterRenderer;
						renderer.textColor = value==1 ?0xffffffff:renderer.fillColor;
						TweenNano.to(renderer, .5, {fillAlpha: value}); 
					}
				}
			}
			public function updateMaxRadius(value:Number):void {
				maxRadius = value;
				for (var i:int=0;i<holder.numElements;i++) {
					var pack:TwitterPacking = holder.getElementAt(i) as TwitterPacking;
					pack.scaler = value/100;
					pack.draw();
				}
			}
//			private var results:Array
//			protected function counter_resultHandler(event:ResultEvent):void
//			{
//				var o:Array  = JSON.decode(event.result.toString()) as Array;
//				results = [];
//				for each(var item:Object in o) {
//					if(common.indexOf(item.word) == -1 && String(item.word).length > 1) {
//						//area2.text+= item.word + " = " + item.count + "\n";
//						results.push(item);
//					}
//				}
//			}
//			protected function toggle_changeHandler(event:Event):void
//			{	
//				panel.visible = toggle.selected ? true : false;
//			}
			private var _topics:Array;
			protected function linksService_resultHandler(event:ResultEvent):void
			{

				//list4.dataProvider = new ArrayList(o);
				
				
				//var a1:Array = countWords(text,0);
				_topics = countWords(text,1);
				var o:Array  = JSON.decode(event.result.toString()) as Array;
				for each(var item:Object  in o) {
					var topic:TwitterTopic = new TwitterTopic();
					topic.link = true;
					topic.count = item.cout;
					topic.value = item.value;
					_topics.push(topic);
				}
				//a1 = a1.concat(o)
				
				//results = results.concat(o);
				
//				list1.dataProvider = new ArrayList(results);
//				list2.dataProvider = new ArrayList(a1);
//				list3.dataProvider = new ArrayList(a2);
//				tweets.text = text;
//				
//				var pack:TwitterPacking = new TwitterPacking(results,this);
//				pack.percentHeight = pack.percentWidth = 100;
//				this.addElement(pack);
//				pack.build();
//				
//				var pack1:TwitterPacking = new TwitterPacking(a1,this);
//				pack1.percentHeight = pack1.percentWidth = 100;
//				this.addElement(pack1);
//				pack1.build();
				
//				var pack2:TwitterPacking = new TwitterPacking(_topics,this);
//				pack2.percentHeight = pack2.percentWidth = 100;
//				holder.addElement(pack2);
//				pack2.build();
//				updateSize();
				this.dispatchEvent(new Event("vizLoaded"));
			}
			public function get topics():Array {
				return _topics;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="service"  resultFormat="text" concurrency="multiple"
	   	result="httpservice1_resultHandler(event)" 
	  	method="GET"/>
<!--		<s:HTTPService id="counterService" resultFormat="text" concurrency="multiple" method="POST" result="counter_resultHandler(event)" />-->
		<s:HTTPService id="linksService" resultFormat="text" concurrency="multiple" method="POST" result="linksService_resultHandler(event)"/>
	</fx:Declarations>

	<!--<s:HGroup paddingLeft="10" height="100%" id="panel">
		<s:List height="100%" id="list1"  >
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Label text="{data.word+' = ' + data.count}" />
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:List height="100%" id="list2"  >
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Label text="{data.word+' = ' + data.count}" />
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:List height="100%" id="list3"  >
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Label text="{data.word+' = ' + data.count}" />
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:List height="100%" id="list4"  >
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Label text="{data.value+' = ' + data.count}" />
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:TextArea width="600" height="100%" id="tweets" />
	</s:HGroup>
	<s:ToggleButton id="toggle" change="toggle_changeHandler(event)"  label="show copy"/>-->
		<s:HGroup verticalAlign="middle" gap="2" width="100%" height="100%" id="holder"/>
</modules:Module>
