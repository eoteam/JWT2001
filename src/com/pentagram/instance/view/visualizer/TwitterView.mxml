<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:modules="ws.tink.spark.modules.*" 
				xmlns:views="com.pentagram.instance.view.visualizer.views.*"
				implements="com.pentagram.instance.view.visualizer.interfaces.ITwitterView"
				resize="updateSize()"
				width="100%" height="100%" xmlns:assets="com.pentagram.view.assets.*" xmlns:controls="com.pentagram.view.controls.*" >
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.greensock.TweenLite;
			import com.pentagram.controller.Constants;
			import com.pentagram.instance.view.visualizer.renderers.TWRendererInfo;
			import com.pentagram.instance.view.visualizer.renderers.TWRendererToolTip;
			import com.pentagram.instance.view.visualizer.renderers.TwitterRenderer;
			import com.pentagram.instance.view.visualizer.views.TwitterPacking;
			import com.pentagram.model.vo.Client;
			import com.pentagram.model.vo.TwitterTopic;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			private var baseURL:String = "http://search.twitter.com/search.json?q=";

			private var maxRadius:Number = 100;
			private var opacity:Boolean = true;

			private var _searchTerm:String;
			private var apiSearchTerm:String;
			private var currentCommonWords:Array;
			
			//single state vars
			private var text:String = '';
			private var counter:int = 1;
			private var pageTotal:int = 3;
			private var limit:int = 10;
			private var allTopics:Array;
			private var allwords:Dictionary; 
			private var allTweets:Array;
			
			
			private var english:Boolean
			private var firstPass:Boolean = true;
			private var termChanged:Boolean = false;
			private var commonWords:Array = ["the","be","to","of","and","a","in","that","have","I","it","for","not","on","with","he","as","you","do",
				"at","this","but","his","by","from","they","we","say","her","she","or","an","will","my","one","all","would","there",
				"their","what","so","up","out","if","about","who","get","which","go","me","when","make","can","like","time","no",
				"just","him","know","take","person","into","year","your","good","some","could","them","see","other","than","then",
				"now","look","only","come","its","over","think","also","back","after","use","two","how","our","	","first","well",
				"way","even","new","want","because","any","these","give","day","most","us"," don't",
				
				"http","bit","ly","rt","www","com","here","lots","ever","are","more","is","why","it's","was","were","had","did","has",
				"quot","amp","'s","youtu","fb",
			
				//spanish
				"de","la","que","y","el","en","a","los","se","no","un","las","del","por","con","una","es","lo","para","su","al","como",
				"más","o","pero","me","le","ha","sus","si","yo","ya","este","porque","muy","todo","cuando","qué","sin","son","sobre",
				"está","también","esta","hay","sí","entre","ser","era","mi","dos","había","nos","años","tiene","hasta","desde","te",
				"eso","fue","todos","puede","han","pues","así","bien","vez","ni","sólo","él","ahora","uno","parte","ese","vida","tiempo",
				"mismo","otro","día","cada","siempre","hacer","donde","esa","nada","hace","tan","entonces","decir","bueno","otra","esto",
				"después","ella","mundo","tanto","otros","menos","va","poco","aquí","mucho","e","usted","estado","estaba","gran","sea","ver",
				"cómo","aunque","están","les","tres","antes","gobierno","sido","casa","algo","hombre","país","dijo","sino","forma","año","estos",
				"caso","hecho","durante","hoy","momento","he","unos","luego","general","creo","ellos","cosas","todas","además","mayor","España",
				"mejor","trabajo","toda","días","tienen","política","tenía","contra","dice","hacia","tal","otras","vamos","veces","gente","lugar",
				"ejemplo","tener","casi","estas","personas","parece","primera","mujer","según","mientras","poder","mí","nunca","nosotros","tu","algunos","pueden"];
			
			
			
			protected var resizeFlag:Boolean = false
	
				
			private var singleLoaded:Boolean = false;
			private var manyLoaded:Boolean = false;
			
			public function set state(value:String):void {
				if(views.currentState != value) {
					views.currentState = value;
					start();
				}
			}
			public function updateSize():void {
				resizeFlag = true;
				this.invalidateDisplayList();
			}
			public function update():void {
				
			}
		
			public function changeView(view:Object):void {
				
			}
			public function get topics():Array {
				return allTopics;
			}
			public function selectTweets(tweets:Vector.<Object>):void {
				views.selectTweets(tweets)
			}
			public function get viewOptions():Array {
				return [maxRadius,opacity,0];
			}
			public function toggleOpacity(value:Number):void {
				opacity = value==1?false:true;
				views.updateOpacity(value);
			}
			public function updateMaxRadius(value:Number):void {
				maxRadius = value;
				views.updateRadius(maxRadius);
			}

			public function showOptions(value:Boolean):void {
				optionsPanel.visible = value;
				if(!value) {
					this.limit = list.selectedItem.value;
					this.pageTotal = pageSlider.value
				}
			}
			public function clear():void {
				counter = 1;
				allTweets = [];
				allTopics = [];
				text = '';
				views.clear();
			}
			public function clearTooltips():void {
				views.clearTooltips();
			}
			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w,h);
				if(resizeFlag) {
					resizeFlag = false;
					handleResize();
				}
			}
			private function handleResize(event:Event=null):void {
				views.resize();
			}
			private function httpservice1_resultHandler(event:ResultEvent):void {
				var o:Object  = JSON.decode(event.result.toString());
				trace(o.results.length);
				allTweets = allTweets.concat(o.results);
				for each(var item:Object in o.results) {
					text+= item.text + "\n";
				}
				if(counter < pageTotal && o.results.length == 100) {
					service.url = baseURL+apiSearchTerm+"&lang=en&rpp=100&page="+counter.toString();
					service.send();
				}
				else  {	
					var params:Object = new Object();
					params.action = "getLinks"
					params.text = text;
					linksService.url =  Constants.DB_EXECUTE;
					linksService.send(params);
				}
				counter++;
			}
			
			private function countWords(tweet:Object,p:int,dic:Dictionary):void {
				var m:Array = new Array();
				var m1:Array = new Array();
				var N:Array = new Array ();
				var NN:int=0;
				var Numwords:int = 0;
				var ch:int=p;
				var k1:int;var k:int;var j:int;
				var A:String = tweet.text;			// original message 
				var B:String = "";
				var C:String="";
				var str:String=" ";
				
				A =" " + A+" ";
				A = A.toUpperCase();		// changes all alphas to Upper case
				if(ch==0) {
					for (var i:int=0;i<=A.length-1;i++)
					{	
						k= A.charCodeAt(i);
						if ( ((k>64) && (k<5000)) || (k==32) ) // ((k>64) && (k<91)) || 
						{	
							C=C+A.charAt(i);
						}
						else 
						{	
							C=C+" ";
						}
					}
					A=C;
				}
				else
				{
					for (i=0;i<=A.length-1;i++)
					{	k=A.charCodeAt(i);
						if (k>31)
						{	
							C=C+A.charAt(i);
						}
						else 
						{	
							C=C+" ";
						}
					}
					A=C;	
				}
				for (i=1;i<=A.length;i++)		//  trims leading spaces and multiple spaces
				{	
					if ((!(A.charAt(i)==" ")) || (!(A.charAt(i-1)==" ")))
					{
						B=B + A.charAt(i);
					}
				}
				//count.result1.value=B;
				B=B+" ";				// makes sure there is a space at end	
				k=0; 
				
				for (i=0;i<=B.length;i++)
				{	
					k1 = B.indexOf(str,k);
					if (k1==-1)		//end of string B
					{	Numwords=i-1;
						break;
					}
					var w:String = B.substring(k,k1);			
					m[i+1]= w;// places all the words into an array m
					k=k1+1;
				}
				//count.result1.value=B; 
				C="";
				
				for (i=1;i<=Numwords; i++)	// Numwords is total number of words
				{	
					if (!(m[i]==""))	// only looks at m1 words that have not been processed before (not empty)
					{	
						NN=NN+1;			//unique word stored in m1 array
						m1[NN]=m[i];
						N[NN]=1;			// initialize counter for word
						for (j=i+1;j<=Numwords+1;j++)	//counts and makes m1 elements with unique word empty.
						{	
							if (m1[NN]==m[j])
							{	
								N[NN]=N[NN]+1;
								m[j]="";
							}
						}	
					}	
				}	
				for (i=1;i<=NN-1;i++)
				{	
					for (j=i+1;j<=NN;j++)
					{	
						if (N[i]<N[j])
						{	
							var temp:String = m1[i];
							m1[i]=m1[j];
							m1[j]=temp;
							temp=N[i];
							N[i]=N[j];
							N[j]=temp;
						}
					}
				}
				//C=C+"Unique:" + NN+"  Total:" + Numwords+"\n";
				//C=C+"Freq.\tWord\n";
				var results:Array = [];
				for (i=1;i<=NN;i++)		// sets up C for showing
				{	
					//trace(N[0],N[i],N[0]*0.1);
					if(currentCommonWords.indexOf(m1[i].toLowerCase()) == -1 && m1[i].length > 1) {
						var topic:Object;
						if(!dic[m1[i]]) {
							topic =  new Object();
							topic.count = Number(N[i]);
							topic.value = m1[i];
							topic.tweets = [];
							topic.tweets.push(tweet);
							dic[m1[i]] = topic;
						}
						else {
							topic = dic[m1[i]];
							topic.tweets.push(tweet);
							topic.count +=  Number(N[i]);
						}
					}
					//C=C + N[i]+ "\t" + m1[i] + "\n";
				}
				//return results; 
			}
			
			private function linksService_resultHandler(event:ResultEvent):void {
				var topic:TwitterTopic;
				var item:Object
				for each(item in allTweets) {
					countWords(item,0,allwords);
					var regExp:RegExp = /((?:http|https):\/\/[a-z0-9\/\?=_#&%~-]+(\.[a-z0-9\/\?=_#&%~-]+)+)|(www(\.[a-z0-9\/\?=_#&%~-]+){2,})/gi;
					var output:String = '<TextFlow xmlns="http://ns.adobe.com/textLayout/2008"><p fontFamily="FlamaBook"><span color="#cccccc">';
					output += item.text.replace(regExp,'</span><a href="$&"><span color="#ffffff">$&</span></a><span color="#cccccc">');
					output += "</span></p></TextFlow>";
					item.text = output;
				}				
				for each(item in allwords) {
					if(item.count > limit) {
						topic = new TwitterTopic();
						topic.count = item.count;
						topic.value = item.value;
						topic.tweets = new ArrayList(item.tweets);
						allTopics.push(topic);
					}
				}	
				
				var o:Array  = JSON.decode(event.result.toString()) as Array;
				for each(item  in o) {
					if(item.count > limit) {
						topic = new TwitterTopic();
						topic.link = true;
						topic.count = item.count;
						topic.value = item.value;
						allTopics.push(topic);
					}
				}
				views.visualize(allTopics);	
				this.updateSize();
				firstPass = false;
			}
			public function sort():void {
//				for (var i:int=0;i<holder.numElements;i++) {
//					var pack:TwitterPacking = holder.getElementAt(i) as TwitterPacking;
//					pack.sort();
//				}
			}
			private var _colors:Vector.<uint>;
			public function set colors(arr:Vector.<uint>):void 
			{
				_colors = arr;
			}
			private function handleClick(event:MouseEvent):void {
				this.limit = list.selectedItem.value;
				this.pageTotal = pageSlider.value
				optionsPanel.visible = false;
				if(firstPass || termChanged) {
					termChanged = false;
					start();
				}
			}
			private function start():void {
				if(views.currentState == 'single' && !singleLoaded) {
					prepareStart();
					counter = 1;
					text = '';	
					allTopics = [];
					allwords = new Dictionary();
					allTweets = [];
					service.url = baseURL+apiSearchTerm+"&lang=en&rpp=100&page=1";
					service.send();
				}
				else if(!manyLoaded) {
					prepareStart();
					tudeCounter = 0;
					text1 = text2 = text3 = '';
					tudeTopics = [];
					tude1Tweets = [];
					tude2Tweets = [];
					tude3Tweets = [];
					tude1Words = new Dictionary();
					tude2Words = new Dictionary();
					tude3Words = new Dictionary();
					tudeDic = [{counter:1,value:'&tude[]=:)'},
							   {counter:1,value:'&tude[]=:('},
							   {counter:1,value:'&tude[]=?'}];
					
					service2.url = baseURL+apiSearchTerm+"&lang=en&rpp=100&page=1&tude[]=:)";
					service2.send();
				}
			}
			private function prepareStart():void {
				this.dispatchEvent(new Event('vizStarted'));
				currentState = "loading";
			}
			public function reload():void {
				singleLoaded = manyLoaded = false;
				views.clear();
				start();
			}
			public function set searchTerm(q:String):void {
				if(_searchTerm != q) {
					termChanged = true;
					_searchTerm = q;
					counter = 1;
					currentCommonWords = [];
					allTweets = [];
					allTopics = [];
					apiSearchTerm = '';
					text = '';
					var tmp:Array = _searchTerm.split(" ");
					for each(var token:String in tmp) {
						apiSearchTerm += token+'+';
						token = token.toLowerCase();
						currentCommonWords.push(token);
						currentCommonWords.push("@"+token);
						currentCommonWords.push("@"+token+":");
						currentCommonWords.push("@"+token+".");
						currentCommonWords.push("@"+token+",");
						currentCommonWords.push("@"+token+")");
					}
					apiSearchTerm = apiSearchTerm.substr(0,apiSearchTerm.length-1);
					currentCommonWords = currentCommonWords.concat(commonWords);
					if(!firstPass) {
						this.optionsPanel.visible = true;
						this.currentState = "preload";
						//views.clear();
					}
				}
			}

			private function views_completeHandler(event:Event):void
			{
				updateSize();
				this.currentState = "loaded";
				_searchTerm = null;
				this.dispatchEvent(new Event('vizComplete'));
				if(views.currentState == 'single')
					singleLoaded = true;
				else manyLoaded = true;
			}

			private var tudeCounter:int;
			
			private var tude1Tweets:Array;
			private var tude2Tweets:Array;
			private var tude3Tweets:Array;
			
			private var tude1Words:Dictionary;
			private var tude2Words:Dictionary;
			private var tude3Words:Dictionary;
			
			private var text1:String;
			private var text2:String;
			private var text3:String;
			
			private var tudeDic:Array = [{counter:1,value:'&tude[]=:('},{counter:1,value:'&tude[]=:)'},{counter:1,value:'&tude[]=?'}];

			private var tudesArr:Array;
			private var tudesDic:Array;
			private var tudeTopics:Array = [];
			private function service2_resultHandler(event:ResultEvent):void
			{
				var o:Object  = JSON.decode(event.result.toString());
				trace(o.results.length);
				//allTweets = allTweets.concat(o.results);
				var tude:String;
				var t:String;
				for each(var item:Object in o.results) {
					t+= item.text + "\n";
				}
				switch(tudeCounter) {
					case 0:
						tude1Tweets = tude1Tweets.concat(o.results);
						text1 += t;
					break
					
					case 1:
						tude2Tweets = tude2Tweets.concat(o.results);
						text2 += t;
					break;
					
					case 2:
						tude3Tweets = tude3Tweets.concat(o.results);
						text3 += t;
					break;
				}
				
				if(o.results.length < 100)
					tudeCounter++;
				else if(tudeDic[tudeCounter].counter >= pageTotal)
					tudeCounter++;
				else
					tudeDic[tudeCounter].counter++;
				trace(tudeCounter);
				if(tudeCounter < 3) {
		
					service2.url = baseURL+apiSearchTerm+ tudeDic[tudeCounter].value +"&lang=en&rpp=100&page="+tudeDic[tudeCounter].counter;
					trace(service2.url);
					service2.send();
				}
				else {
					
					tudesArr = [tude1Tweets,tude2Tweets,tude3Tweets];
					tudesDic = [tude1Words,tude2Words,tude3Words];
					var params:Object;
					var tok:AsyncToken;
					
					params = new Object();
					params.action = "getLinks"
					params.text = text1;
					linksService2.url =  Constants.DB_EXECUTE;
					tok = linksService2.send(params);
					tok.index = 0;
					
					params = new Object();
					params.action = "getLinks"
					params.text = text2;
					linksService2.url =  Constants.DB_EXECUTE;
					tok = linksService2.send(params);
					tok.index = 1;
					
					params = new Object();
					params.action = "getLinks"
					params.text = text3;
					linksService2.url =  Constants.DB_EXECUTE;
					tok = linksService2.send(params);
					tok.index = 2;
				}
			}

			private function linksService2_resultHandler(event:ResultEvent):void
			{
				var index:int = event.token.index;
				var topic:TwitterTopic
				var item:Object;
				var arr:Array = tudesArr[index];
				var dic:Dictionary = tudesDic[index];
				var tops:Array = [];
				
				for each(item in arr) {
					countWords(item,0,dic);
					var regExp:RegExp = /((?:http|https):\/\/[a-z0-9\/\?=_#&%~-]+(\.[a-z0-9\/\?=_#&%~-]+)+)|(www(\.[a-z0-9\/\?=_#&%~-]+){2,})/gi;
					var output:String = '<TextFlow xmlns="http://ns.adobe.com/textLayout/2008"><p fontFamily="FlamaBook"><span color="#cccccc">';
					output += item.text.replace(regExp,'</span><a href="$&"><span color="#ffffff">$&</span></a><span color="#cccccc">');
					output += "</span></p></TextFlow>";
					item.text = output;
				}		
				
				for each(item in dic) {
					//if( (index == 2 && item.count > limit) || index < 2) {
					if(item.count > limit) {	
						topic = new TwitterTopic();
						topic.count = item.count;
						topic.value = item.value;
						topic.color = _colors[index];
						topic.tweets = new ArrayList(item.tweets);
						tops.push(topic);
					}					
				}
				var o:Array = JSON.decode(event.result.toString()) as Array;
				for each(item  in o) {
					//if( (index == 2 && item.count > limit) || index < 2) {
					if(item.count > limit) {
						topic = new TwitterTopic();
						topic.link = true;
						topic.count = item.count;
						topic.value = item.value;
						topic.color = _colors[index];
						tops.push(topic);
					}
				}
				tudeTopics.push(tops);
				if(index == 2) {
					views.visualize(tudeTopics);	
					this.updateSize();
					allTopics = tudeTopics[0].concat(tudeTopics[1]).concat(tudeTopics[2]);
				}
				firstPass = false;			
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="service"  resultFormat="text" concurrency="multiple" result="httpservice1_resultHandler(event)" method="GET"/>
		<s:HTTPService id="service2"  resultFormat="text" concurrency="multiple" result="service2_resultHandler(event)"  method="GET"/>
		
		<s:HTTPService id="linksService" resultFormat="text" concurrency="multiple" method="POST" result="linksService_resultHandler(event)"/>
		<s:HTTPService id="linksService2" resultFormat="text" concurrency="multiple" method="POST" result="linksService2_resultHandler(event)"/>
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="vizComplete",type="flash.events.Event")]
	</fx:Metadata>
	<modules:states>
		<s:State name="preload" />
		<s:State name="loading" />
		<s:State name="loaded" />
	</modules:states>

	<views:TwitterViews width="100%" height="100%" id="views" complete="views_completeHandler(event)" />
	
	<s:Group left="5" bottom="0" styleName="darkPanel" id="optionsPanel" width="240" height="200">
		<s:filters>
			<s:DropShadowFilter alpha="0.4" angle="90" distance="2" quality="2"/>
		</s:filters>
		<s:VGroup width="240" height="200" gap="0">
			<s:Rect radiusX="4" radiusY="4"  width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#1A1A1A" alpha="0.9"/>
				</s:fill>
			</s:Rect>
			<s:Group width="100%">
				<s:Path id="path12"  winding="nonZero" data="M 0 0 L 10.231 16.626 L 20.466 0 L 0 0 Z" left="10">
					<s:fill>
						<s:SolidColor color="#1A1A1A" alpha="0.9"/>
					</s:fill>
				</s:Path>
			</s:Group>	
		</s:VGroup>
		
		<s:VGroup gap="6" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="240" height="200" styleName="darkPanel">
			<s:Label fontFamily="FlamaBold" text="Choose rendering speed"  color="0xffffff" />
			<s:TabBar id="list" styleName="darkPanel" requireSelection="true" width="100%" selectedIndex="2">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object label="Slow" value="0" />
						<fx:Object label="Medium" value="5" />
						<fx:Object label="Fast" value="10" />
					</s:ArrayList>
				</s:dataProvider>
				<s:itemRenderer>
					<fx:Component>
						<s:ButtonBarButton width="100%" skinClass="com.pentagram.view.skins.buttons.DarkToggleButton" label="{data.label}" />
					</fx:Component>
				</s:itemRenderer>
				<!--<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer autoDrawBackground="false"  width="100%" styleName="darkPanel">
							<s:Button skinClass="com.pentagram.view.skins.buttons.DarkButton" width="100%" label="{data.label}"/>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>-->
				<s:layout>
					<s:VerticalLayout gap="4" verticalAlign="middle" horizontalAlign="center" />
				</s:layout>
			</s:TabBar>
			<s:Rect height="10" />

			<s:Label fontFamily="FlamaBold" text="# of pages (100 tweets per page)"  color="0xffffff" />
			<s:HSlider minimum="1" maximum="15" id="pageSlider" skinClass="com.pentagram.view.skins.controls.DarkHSlider" stepSize="1"
			showDataTip="true"  change="this.pageTotal=pageSlider.value" width="255"  />
			<s:Button label="Save" width="100%" click="handleClick(event)"  skinClass="com.pentagram.view.skins.buttons.DarkButton" textAlignLast="center"/>
		</s:VGroup>
	</s:Group>
	
</modules:Module>
