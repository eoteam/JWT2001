<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:vo="com.pentagram.model.vo.*"
			   width="240" height="120" height.open="180" alpha="0" 
			   creationComplete="titlewindow1_creationCompleteHandler(event)"
			   close="titlewindow1_closeHandler(event)"
			   creationCompleteEffect="{fadeIn}"
			   skinClass="com.pentagram.view.skins.controls.TooltipSkin">
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			import mx.managers.PopUpManager;
			import spark.skins.spark.TitleWindowSkin;
			
			private var _content:String;
			private var controlBarPressed:Boolean = false;
			
			private function titlewindow1_closeHandler(event:CloseEvent):void {
				tipVisible = true;
				PopUpManager.removePopUp(this);
			}
			private function titlewindow1_moveHandler(event:Event):void {
				tipVisible = false;
			}
			private function button1_clickHandler(event:MouseEvent):void {
				if(this.currentState == "closed")
					this.currentState = "open";
				else
					this.currentState = "closed";
			}
			private function titlewindow1_creationCompleteHandler(event:FlexEvent):void {
				this.moveArea.addEventListener(MouseEvent.MOUSE_DOWN,controlBarMouseHandler);
				this.moveArea.addEventListener(MouseEvent.MOUSE_UP,controlBarMouseHandler);
				this.moveArea.addEventListener(MouseEvent.MOUSE_MOVE,controlBarMouseHandler);
			}
			private function controlBarMouseHandler(event:MouseEvent):void {
				switch(event.type) {
					case MouseEvent.MOUSE_DOWN:
						controlBarPressed = true;
					break;
					case MouseEvent.MOUSE_UP:
						controlBarPressed = false;
					break;
					case MouseEvent.MOUSE_MOVE:
						if(controlBarPressed)
							this.tipVisible = false;
					break;
				}	
			}
			public function set content(value:String):void {
				_content = value;
				ctf =  TextConverter.importToFlow(value,TextConverter.TEXT_LAYOUT_FORMAT);
			}
			public function get content():String {
				return _content;
			}
			public function close():void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<vo:Country id="country" />
		<fx:Boolean id="tipVisible">true</fx:Boolean>
		<fx:Boolean id="leftTipVisible">true</fx:Boolean>
		<fx:Boolean id="rightTipVisible">false</fx:Boolean>
		<s:Fade id="fadeIn" alphaTo="1" duration="250" />
		<s:TextFlow id="ctf" />
	</fx:Declarations>
	<s:states>
		<s:State name="closed"/>
		<s:State name="open" />
	</s:states>
	<s:transitions>
		<s:Transition toState="*">
			<s:Resize targets="{[infoContainer,this]}" duration="500" />
		</s:Transition>
	</s:transitions>
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:HGroup paddingLeft="6" paddingRight="6" verticalAlign="middle" height="35" width="100%" >
		<s:Label fontSize="14" text="{country.name}" verticalCenter="0" horizontalCenter="0" color="#ffffff" maxDisplayedLines="2"  width="100%"/>
		<s:Button skinClass="com.pentagram.view.skins.buttons.DoubleArrowButton" chromeColor="0x1a1a1a" click="button1_clickHandler(event)" />
		<s:Image source="{country.thumb}" id="flag"  skinClass="com.pentagram.view.skins.controls.FlagSkin"
		maxHeight="30"  smooth="true" height="30" smoothingQuality="high" scaleMode="stretch"  fillMode="scale"
		complete="flag.width=flag.sourceWidth*30/flag.sourceHeight"/>
	</s:HGroup>
	<s:VGroup width="100%" height.open="60" height="0" id="infoContainer" >
		
	</s:VGroup>
	<s:Line  width="100%" height="1">
		<s:stroke>
			<s:SolidColorStroke caps="none" color="#4D4D4D" joints="miter" miterLimit="4" weight="1"/>
		</s:stroke>
	</s:Line>
	<s:RichText width="100%" height="100%" fontSize="12" id="dataText" fontLookup="embeddedCFF" paddingLeft="6" paddingRight="6" textFlow="{ctf}" />	
</s:TitleWindow>
