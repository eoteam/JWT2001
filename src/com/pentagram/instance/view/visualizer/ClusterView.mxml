<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009"  creationComplete="module1_creationCompleteHandler(event)"
				xmlns:s="library://ns.adobe.com/flex/spark"  resize="module1_resizeHandler(event)"
				implements="com.pentagram.instance.view.visualizer.interfaces.IClusterView"
				xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:modules="ws.tink.spark.modules.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.pentagram.instance.view.visualizer.renderers.ClusterRenderer;
			import com.pentagram.instance.view.visualizer.renderers.InfoSprite;
			import com.pentagram.instance.view.visualizer.renderers.MapRenderer;
			import com.pentagram.model.vo.DataRow;
			import com.pentagram.model.vo.Dataset;
			
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			import flash.geom.Vector3D;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.core.SpriteVisualElement;
			
			protected var _nodes:Vector.<MapRenderer> = new Vector.<MapRenderer>;  
			private var iterationCounter:int = 0;
			private var CENTER:Point;
			private var v:Vector3D;
			private var ds:Dataset;
			public function visualize(dataset1:Dataset,dataset2:Dataset=null):void {
				//this.removeAllElements();
				if(dataset1.type == 0) { //quantitative
					for each(var item:Object in dataset1.optionsArray) {
						var parent:SpriteVisualElement = new SpriteVisualElement();
						parent.percentHeight = parent.percentWidth = 100;
						
						this.addElement(parent);
						var circle:CirclePacking = new CirclePacking();
						circle.width = 800; circle.height = 800;
						circle.x = parent.width/2;
						circle.y = parent.height/2;
						parent.addChild(circle);	
						for each(var row:DataRow in dataset1.rows) {
							var value:String = dataset1.type == 1 ? row[dataset1.years[0]] : row.value;
							if(value == item.item) {
								var sprite:InfoSprite = new  InfoSprite();
								sprite.data = row;
								sprite.radius = 10;
								circle.spriteArray.push(sprite);
								circle.addChild(sprite);
							}
						}
						circle.refresh();
					} 
				}
			}
			public function update():void {
				
			}
			
			public function updateMaxRadius(value:Number):void {
				
			}
			
			public function unload():void {
				
			}
						
			private var _continous:Boolean = false;
			public function get continous():Boolean{
				return _continous;
			}			
			public function set continous(value:Boolean):void{
				_continous = value;
			}
			
			public function pause():void  {
				
			}
			
			public function resume():void {
				
			}
			
			public function updateYear(year:int):void {
				
			}
			public function toggleCategory(visible:Boolean,prop:String):void {
				
			}
			protected function module1_creationCompleteHandler(event:FlexEvent):void {
//				var parent:SpriteVisualElement = new SpriteVisualElement();
//				parent.percentHeight = parent.percentWidth = 100;
//				this.addElement(parent);
//				
//				var circle:C2 = new C2();
//				circle.width = 800; circle.height = 800;
//				circle.x = parent.width/2;
//				circle.y = parent.height/2;
//				parent.addChild(circle);
//				parent.graphics.beginFill(0x444444,0.6);
//				parent.graphics.drawRect(0,0,600,600);
			}
			public function toggleOpacity(value:Number):void {

			}			

			protected function module1_resizeHandler(event:ResizeEvent):void
			{
				for (var i:int=0;i<this.numElements;i++) {
					var parent:SpriteVisualElement = this.getElementAt(i) as SpriteVisualElement;
					var c:CirclePacking = parent.getChildAt(0) as CirclePacking;
					c.x = parent.width/2;
					c.y = parent.height/2;
				}
			}

		]]>
	</fx:Script>
	<modules:layout>
		<s:HorizontalLayout gap="2" verticalAlign="middle" />
	</modules:layout>

</modules:Module>
