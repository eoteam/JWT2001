<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
				xmlns:modules="ws.tink.spark.modules.*"  clipAndEnableScrolling="true"
				implements="com.pentagram.instance.view.visualizer.interfaces.IClusterView" 
				creationComplete="creationCompleteHandler(event)"
				resize="updateSize()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenNano;
			import com.pentagram.instance.view.visualizer.renderers.RendererInfo;
			import com.pentagram.instance.view.visualizer.views.CirclePacking;
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			import com.pentagram.instance.view.visualizer.renderers.ClusterRenderer;
			import com.pentagram.instance.view.visualizer.renderers.MapRenderer;
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.DataRow;
			import com.pentagram.model.vo.Dataset;
			
			import mx.events.FlexEvent;
			
			import spark.core.SpriteVisualElement;
			
			private var maxRadius:Number = 25;
			private var currentYear:int;
			private var opacity:Boolean = true;

			private var firstPass:Boolean = true;
			private var ds1:Dataset;
			private var ds2:Dataset;
			protected var resizeFlag:Boolean = false
				
			public function get datasets():Array {
				return [null,null,ds1,ds2];
			}
			public function visualize(dataset1:Dataset,dataset2:Dataset=null):void {
				this.ds1 = dataset1; this.ds2 = dataset2;
				if(!firstPass) {
					doVisualize();
				}
			}
			public function update():void {
				
			}
			public function updateMaxRadius(value:Number):void {
				maxRadius = value;
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking =  holder.getElementAt(i) as CirclePacking;
					c.scaler = value/100;
					c.draw();
				}
			}
			public function unload():void {
				
			}
			public function pause():void  {
				
			}
			
			public function resume():void {
				
			}
			
			public function updateYear(year:int):void {
				currentYear = year;
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					for (var j:int=0;j<c.numChildren;j++) {
						var circle:ClusterRenderer = c.getChildAt(j) as ClusterRenderer;
						if(ds2.time == 1 && year >= ds2.years[0] && year <= ds2.years[1]) {
							circle.radiusBeforeRendering =  (circle.data2[year.toString()] - ds2.min) / (ds2.max - ds2.min) * maxRadius;	
							circle.content = this.generateContent(circle.data2[year.toString()],year);
						}	
							
					}
					c.doLayout(true);			
				}
			}
			public function toggleCategory(visible:Boolean,prop:String):void {
				
			}
			public function toggleOpacity(value:Number):void {
				opacity = value==1?false:true;
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					for (var j:int=0;j<c.numChildren;j++) {
						var renderer:ClusterRenderer =  c.getChildAt(j) as ClusterRenderer;
						renderer.textColor = value==1 ?0xffffffff:renderer.fillColor;
						TweenNano.to(renderer, .5, {fillAlpha: value});
					}
				}
			}	
			public function updateSize():void {
				resizeFlag = true;
				this.invalidateDisplayList();
			}
			public function addCategory(value:Category,count:int):void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(c.name == value.name) {
						c.show();
						break;
					}
				}
				var t:Timer = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
			}
			public function removeCategory(value:Category,count:int):void {
				for (var i:int=0;i<holder.numElements;i++) {
					
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(c.name == value.name) {
						c.hide();
						break;
					}
				}
				var t:Timer = new Timer(1000,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
				this.updateSize();
			}
			public function selectCategory(value:Category):void {
				for (var i:int=0;i<holder.numElements;i++) {
					
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(c.name != value.name) {
						c.hide();
					}
					else {
						c.show();
						c.percentHeight = c.percentWidth = 100;
						c.height = holder.height;
						c.width = holder.width/holder.numElements;
					}
				}
				var t:Timer = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
			}
			public function selectAllCategories():void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					c.show();
				}
				var t:Timer = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
			}
			public function clearTooltips():void {
				for (var i:int=0;i<holder.numElements;i++) {
					var pack:CirclePacking = holder.getElementAt(i) as CirclePacking;
					for each(var r:ClusterRenderer in pack.renderers) {
						r.closeInfo()
					}
				}
			}

			private function creationCompleteHandler(event:FlexEvent):void {
				this.doVisualize();
			}
			public function get viewOptions():Array {
				return [maxRadius,opacity,currentYear];
			}
			private function handleTimer(event:TimerEvent):void {
				updateSize();
			}
			protected function doVisualize():void {
				holder.removeAllElements();
				if(ds1.type == 0) { //quantitative
					for each(var item:Category in ds1.optionsArray) {
						item.selected = true;
						var arr:Array = [];
						var r:Number = 1;
						for each(var row:DataRow in ds1.rows) {
							var value:String = ds1.time == 1 ? row[ds1.years[0]] : row.value;
							if(value == item.name) {
								if(ds2 && ds2.type == 1) {
									var row2:DataRow = ds2.rows.getItemAt(ds1.rows.getItemIndex(row)) as DataRow;
									var content:String;
									if(ds2.time == 1) {
										r = (row2[ds2.years[0]] - ds2.min) / (ds2.max - ds2.min) * maxRadius;
										content = generateContent(row2[ds2.years[0]],ds2.years[0]);
									}
									else {
										r = (row2.value - ds2.min) / (ds2.max - ds2.min) * maxRadius;	
										content = generateContent(row2.value);
									}
								}
								arr.push({data:row,radius:r,color:item.color,data2:row2,content:content});
							}	
						}
						var circle:CirclePacking = new CirclePacking(arr,this);
						circle.percentHeight = circle.percentWidth = 100;
						circle.name = item.name;
						holder.addElement(circle);
						circle.build();
						updateSize();
					} 
				}
				firstPass = false;
				this.callLater(updateSize);
				var t:Timer = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
			}
			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w,h);
				if(resizeFlag) {
					resizeFlag = false;
					handleResize();
				}
			}
			
			private function handleResize(event:Event=null):void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(c.visible) {
						c.percentHeight = c.percentWidth = 100;
						c.draw();
					}
				}
			}
			private function generateContent(value:String,year:int=-1):String {
				var result:String = "<TextFlow xmlns='http://ns.adobe.com/textLayout/2008'><p fontFamily='FlamaBook'>";
				result += '<span color="#cccccc">'+ds2.name;
				if(year != -1)
					result += '('+year+')';
				result += ': </span><span color="#ffffff">'+value+'</span>';
				result += "</p></TextFlow>";
				return result;
			}

		]]>
	</fx:Script>

	<s:HGroup verticalAlign="middle" gap="2" width="100%" height="100%" id="holder"/>

</modules:Module>
