<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"  
				xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
				xmlns:modules="ws.tink.spark.modules.*"  clipAndEnableScrolling="true"
				implements="com.pentagram.instance.view.visualizer.interfaces.IClusterView" 
				creationComplete="creationCompleteHandler(event)"
				resize="updateSize()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenNano;
			import com.pentagram.instance.view.visualizer.views.CirclePacking;
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			import com.pentagram.instance.view.visualizer.renderers.ClusterRenderer;
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.DataRow;
			import com.pentagram.model.vo.Dataset;
			
			import mx.events.FlexEvent;
			
			import spark.core.SpriteVisualElement;
			
			private var maxRadius:Number = 100;
			private var currentYear:String;
			private var opacity:Boolean = true;

			private var firstPass:Boolean = true;
			private var ds1:Dataset;
			private var ds2:Dataset;
			protected var resizeFlag:Boolean = false
				
			public function get datasets():Array {
				return [null,null,ds1,ds2];
			}
			public function visualize(dataset1:Dataset,dataset2:Dataset=null):void {
				this.ds1 = dataset1; this.ds2 = dataset2;
				if(!firstPass) {
					doVisualize();
				}
			}
			public function update():void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					var j:int=0;
					var circle:ClusterRenderer;
					var dp:Vector.<ClusterRenderer> = c.filterMode?c.filteredRenderers:c.renderers;
					var value:Number;
					
					if(ds2.time == 1 && ds2.years.indexOf(currentYear) != -1) {
						for (j=0;j<dp.length;j++) {
							circle = dp[j];
							value = circle.data2[currentYear];
							if(value >= ds2.min && value <= ds2.max) {
								circle.radiusBeforeRendering =  (value - ds2.min) / (ds2.max - ds2.min) * maxRadius;	
								circle.content = this.generateContent(value,currentYear);
							}
							else circle.radiusBeforeRendering = 0;
						}
					}
					else {
						for (j=0;j<dp.length;j++) {
							circle = dp[j];
							value = circle.data2.value;
							if(value >= ds2.min && value <= ds2.max) {
								circle.radiusBeforeRendering =  (value - ds2.min) / (ds2.max - ds2.min) * maxRadius;	
								circle.content = this.generateContent(value);
							}
							else circle.radiusBeforeRendering = 0;
						}
					}
					if(!c.filterMode)
						c.doLayout(true);			
					else c.filter();
				}				
			}
			public function updateMaxRadius(value:Number):void {
				maxRadius = value;
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking =  holder.getElementAt(i) as CirclePacking;
					c.scaler = value/100;
					c.draw();
				}
			}
			public function pause():void  {
				
			}
			
			public function resume():void {
				
			}
			public function selectCountries(countries:Vector.<Object>):void {
				
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(c.visible) {
						for (var j:int=0;j<c.numChildren;j++) {
							var circle:ClusterRenderer = c.getChildAt(j) as ClusterRenderer;
							if(countries.indexOf(circle.data2.country) != -1) {
								if(circle.fillAlpha != 1) {
									TweenNano.killTweensOf(circle,false);
									TweenNano.to(circle,0.5,{fillAlpha:1});
									circle.textColor = 0xffffffff;
									circle.toggleInfo(true);
								}
							}
							else {
								if(circle.fillAlpha != 0.2) {
									TweenNano.killTweensOf(circle,false);
									TweenNano.to(circle,0.5,{fillAlpha:0.2});
									circle.textColor = circle.fillColor;
									circle.toggleInfo(false);
								}
							}
						}
					}
				}
			}
			public function updateYear(year:String):void {
				currentYear = year;
				update();
			}
			public function toggleCategory(visible:Boolean,prop:String):void {
				
			}
			public function toggleOpacity(value:Number):void {
				opacity = value==1?false:true;
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					for (var j:int=0;j<c.numChildren;j++) {
						var renderer:ClusterRenderer =  c.getChildAt(j) as ClusterRenderer;
						renderer.textColor = value==1 ?0xffffffff:renderer.fillColor;
						TweenNano.killTweensOf(renderer,true);
						TweenNano.to(renderer, .5, {fillAlpha: value});
					}
				}
			}	
			public function updateSize():void {
				resizeFlag = true;
				this.invalidateDisplayList();
			}
			public function addCategory(value:Category,count:int):void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(ds1.id != -1) {
						if(c.name == value.name) {
							c.show();
							break;
						}
					}
					else {
						for each(var renderer:ClusterRenderer in c.renderers) {
							if(renderer.data2.country.region.name != value.name)
								renderer.radius = 0;
							else {
								c.filteredRenderers.push(renderer);
								trace(renderer.data2.country.region.name);
							}
						}
						c.filter();
					}
				}
				var t:Timer = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
			}
			public function removeCategory(value:Category,count:int):void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(ds1.id != -1) {
						if(c.name == value.name) {
							c.hide();
							break;
						}
					}
					else {
						for each(var renderer:ClusterRenderer in c.renderers) {
							if(renderer.data2.country.region.name == value.name) {
								renderer.radius = 0;
								c.filteredRenderers.splice(c.filteredRenderers.indexOf(renderer),1);
							}
						}
						c.filter();
					}
				}
				var t:Timer = new Timer(1000,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
				this.updateSize();
			}
			public function selectCategory(value:Category):void {
				for (var i:int=0;i<holder.numElements;i++) {	
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(ds1.id != -1) {
						if(c.name != value.name) {
							c.hide();
						}
						else {
							c.show();
							c.percentHeight = c.percentWidth = 100;
							c.height = holder.height;
							c.width = holder.width/holder.numElements;
						}
					}
					else {
						c.filteredRenderers = new Vector.<ClusterRenderer>();;
						for each(var renderer:ClusterRenderer in c.renderers) {
							if(renderer.data2.country.region.name != value.name)
								renderer.radius = 0;
							else {
								c.filteredRenderers.push(renderer);
								trace(renderer.data2.country.region.name);
							}
						}
						c.filter();
					}
					var t:Timer = new Timer(100,1);
					t.addEventListener(TimerEvent.TIMER,handleTimer);
					t.start();
				}
			}
			public function selectAllCategories():void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(ds1.id != -1) {
						c.show();
					}
					else
						c.restore();
				}
				var t:Timer = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();
			}
			public function clearTooltips():void {
				for (var i:int=0;i<holder.numElements;i++) {
					var pack:CirclePacking = holder.getElementAt(i) as CirclePacking;
					for each(var r:ClusterRenderer in pack.renderers) {
						r.toggleInfo(false);
					}
				}
			}
			public function get didVisualize():Boolean {
				return !firstPass;
			}
			private function creationCompleteHandler(event:FlexEvent):void {
				this.doVisualize();
			}
			public function get viewOptions():Array {
				return [maxRadius,opacity,currentYear];
			}
			private function handleTimer(event:TimerEvent):void {
				updateSize();
			}
			protected function doVisualize():void {
				holder.removeAllElements();
				var t:Timer;
				var arr:Array;
				var r:Number
				var row:DataRow
				var row2:DataRow;
				var circle:CirclePacking;
				var content:String = '';
				var value2:Number;
				
				if(ds1.id!= -1 && ds1) {
					if(ds1.type == 0) { //quantitative
						for each(var item:Category in ds1.optionsArray) {
							item.selected = true;
							arr = [];
							r = 1;
							for each(row in ds1.rows) {
								var value:String = ds1.time == 1 ? row[ds1.years[0]] : row.value;
								if(value == item.name) {
									if(ds2) {
										for each(row2 in ds2.rows) {
											if(row2.country == row.country)
												break;
										}
										if(ds2.type == 1) {
											if(ds2.time == 1) {
												currentYear = ds2.years[0];	
												value2 = row2[ds2.years[0]];
												if(!isNaN(value2) && value2 >= ds2.min && value2 <= ds2.max) {
													r = (value2 - ds2.min) / (ds2.max - ds2.min) * maxRadius;
													content = generateContent(value2,ds2.years[0]);
												}
												else r = 0;
											}
											else {
												value2 = row2.value;
												if(!isNaN(value2) && value2 >= ds2.min && value2 <= ds2.max) {
													r = (value2 - ds2.min) / (ds2.max - ds2.min) * maxRadius;	
													content = generateContent(value2);
												}
												else r = 0;
											}	
										}
										else if(ds2.id == -1) {
											r = maxRadius;
											content = generateContent2(row2);
										}
									}
									if(!isNaN(r))
										arr.push({data:row,radius:r,color:item.color,data2:row2,content:content});
								}	
							}
							circle = new CirclePacking(arr,this,opacity);
							circle.percentHeight = circle.percentWidth = 100;
							circle.name = item.name;
							holder.addElement(circle);
							circle.build();
							updateSize();
						} 
					}
				}
				else if(ds2 && ds2.id != -1) {
					arr = [];
					for each(row in ds2.rows) {
						if(ds2.time == 1) {
							value2 = row[ds2.years[0]];
							if(!isNaN(value2) && value2 >= ds2.min && value2 <= ds2.max) {
								r = (value2 - ds2.min) / (ds2.max - ds2.min) * maxRadius;
								content = generateContent(value2,ds2.years[0]);
							}
							else r = 0;
						}
						else {
							value2 = row.value;
							if(!isNaN(value2) && value2 >= ds2.min && value2 <= ds2.max) {
								r = (value2 - ds2.min) / (ds2.max - ds2.min) * maxRadius;	
								content = generateContent(value2);
							}
							else r = 0;
						}
						if(!isNaN(r))
							arr.push({data:null,radius:r,color:row.country.region.color,data2:row,content:content});
				
					}
					circle = new CirclePacking(arr,this,opacity);
					circle.percentHeight = circle.percentWidth = 100;
					circle.name = ds2.name;
					holder.addElement(circle);
					circle.build();
					updateSize();
				} 			
				else {
					arr = [];
					for each(row in ds1.rows) {
						content = generateContent2(row);
						arr.push({data:row,radius:maxRadius,color:row.country.region.color,data2:row,content:content});
					}
					circle = new CirclePacking(arr,this,opacity);
					circle.percentHeight = circle.percentWidth = 100;
					circle.name = ds2.name;
					holder.addElement(circle);
					circle.build();
					updateSize();
				}
				
				
				firstPass = false;
				this.callLater(updateSize);
				t = new Timer(100,1);
				t.addEventListener(TimerEvent.TIMER,handleTimer);
				t.start();	
			}
			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w,h);
				if(resizeFlag) {
					resizeFlag = false;
					handleResize();
				}
			}
			private function handleResize(event:Event=null):void {
				for (var i:int=0;i<holder.numElements;i++) {
					var c:CirclePacking = holder.getElementAt(i) as CirclePacking;
					if(c.visible) {
						c.percentHeight = c.percentWidth = 100;
						c.draw();
					}
				}
			}
			private function generateContent(value:Number,year:String=null):String {
				var result:String = "<TextFlow xmlns='http://ns.adobe.com/textLayout/2008'><p fontFamily='FlamaBook'>";
				result += '<span color="#cccccc">'+ds2.name;
				if(year != null)
					result += '('+year+')';
				result += ': </span><span color="#ffffff">'+value.toString()+'</span>';
				result += "</p></TextFlow>";
				return result;
			}
			private function generateContent2(value:DataRow):String {
				var result:String = "<TextFlow xmlns='http://ns.adobe.com/textLayout/2008'><p fontFamily='FlamaBook'>";
				result += '<span color="#cccccc">Region';
				result += ': </span><span color="#ffffff">'+value.country.name+'</span>';
				result += "</p></TextFlow>";
				return result;
			}

		]]>
	</fx:Script>
<!--	<s:Rect  width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0xff0000" alpha=".2" />
		</s:fill>
	</s:Rect>-->
	<s:HGroup verticalAlign="middle" gap="2" width="100%" height="100%" id="holder"/>

</modules:Module>
