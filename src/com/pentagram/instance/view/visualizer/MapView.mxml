<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"  width="100%" height="100%"
				xmlns:mx="library://ns.adobe.com/flex/mx"  clipAndEnableScrolling="true"
				xmlns:modules="ws.tink.spark.modules.*" contentBackgroundColor="0xff0000" 
				implements="com.pentagram.instance.view.visualizer.interfaces.IMapView" 
				xmlns:assets="assets.*" 
				xmlns:maps="assets.maps.*" 
				xmlns:visualizer="com.pentagram.instance.view.visualizer.*"
				xmlns:layouts="com.pentagram.view.layouts.*"
				xmlns:views="com.pentagram.instance.view.visualizer.views.*"
				resize="updateSize()"  
				creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			
			import org.cove.ape.APEngine;
			
			[Embed(source="/assets/fonts/FlamaBold.ttf", fontName="FlamaBookMx2",embedAsCFF="false",mimeType = "application/x-font")]
			private var _flamaBook:Class;
			
			import com.greensock.TweenNano;
			import com.pentagram.instance.view.visualizer.renderers.MapRenderer;
			import com.pentagram.model.vo.Category;
			import com.pentagram.model.vo.Client;
			import com.pentagram.model.vo.Country;
			import com.pentagram.model.vo.DataRow;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.model.vo.Region;
			import com.pentagram.utils.CallTimer;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			private const PATH:String = "assets/maps/";
			
			private var renderers:Vector.<MapRenderer>;
			private var renderersDictionary:Dictionary;
			
			private var maxRadius:Number = 25;
			private var currentYear:int;
			private var opacity:Boolean = true;
			
			private var dataset:Dataset;
			private var resizeFlag:Boolean = false;
			private var firstPass:Boolean = true;
			private var _client:Client;
			private var _categories:ArrayList;
			private var _isCompare:Boolean = true;
			
			public function get datasets():Array {
				return [null,null,dataset,null];
			}
			public function toggleMap(visible:Boolean):void {
				if(mapHolder) {
					var a:int = visible?1:0;
					TweenNano.to(mapHolder,.5,{alpha:a});
				}
			}
			public function updateSize():void {
				//holder.visible = false;
				doResize();
				resizeFlag = true;
				this.invalidateDisplayList();
			}
			public function set client(value:Client):void {
				_client  = value;
			}
			public function set categories(value:ArrayList):void {
				this._categories = value;
			}
			public function visualize(dataset:Dataset):void {
				
				this.dataset = dataset;
				if(!firstPass) {
					doVisualize();
				}
			}
			public function set isCompare(value:Boolean):void {
				_isCompare = value;
			}
			public function unload():void {
				
			}			
			public function resume():void {
				
			}
			public function pause():void {
				
			}
			public function updateMaxRadius(value:Number):void {
				this.maxRadius = value;
				update();
			}
			public function updateYear(year:int):void {
				this.currentYear = year;
				update();	
			}
			public function update():void {
				for each(var c:MapRenderer in renderers) {
					var r:Number;
					if(c.data) {
						var content:String;
						if(dataset.time == 1) {
							r = (c.data[currentYear] - dataset.min) / (dataset.max - dataset.min) * maxRadius;
							content = generateContent(c.data[currentYear],currentYear);
						}
						else {
							r = (c.data.value - dataset.min) / (dataset.max - dataset.min) * maxRadius;
							content = generateContent(c.data.value);
						}
						TweenNano.to(c, .5, {radius: r,onUpdate:updateRenderer,onUpdateParams:[c]});
						c.content = content;
						c.draw();
					}
				}
				if(holder.balls.collideInternal) {
					holder.start();
				}
			}
			public function selectAllCategories():void {
				var map:FXGLoader = mapHolder.getElementAt(0) as FXGLoader;
				if(map.region.fxgmap != "world_map.xml")
					loadWorldMap();
				for each(var c:MapRenderer in renderers) {
					if(c && c.data) {
						c.visible = true;
					}
				}
				var timer:CallTimer = new CallTimer(adjustRenderers,null,250,1);
				timer.start();	
			}
			public function addCategory(value:Category,count:int):void {
				var region:Region = value as Region;
				var map:FXGLoader =  mapHolder.getElementAt(0) as FXGLoader
				for each(var c:MapRenderer in renderers) {					
					if(c && c.data && c.data.country.region.name == region.name) {
						c.visible = true;	
						c.draw();
					}
				}
				if(count > 1 && map.region.fxgmap != "world_map.xml")  {
					this.loadWorldMap();
				}
			}
			public function removeCategory(value:Category,count:int):void {
				var region:Region = value as Region;
				var map:FXGLoader = mapHolder.getElementAt(0) as FXGLoader;
				for each(var c:MapRenderer in renderers) {			
					if(c && c.data && c.data.country.region.name == region.name) {
						c.visible = false;
						c.draw();
					}
				}
			}
			public function selectCategory(value:Category):void {
				var existingMap:FXGLoader;
				var region:Region = value as Region;
				var map:FXGLoader;
				mapHolder.removeAllElements();
				map = new FXGLoader();
				map.addEventListener(Event.COMPLETE,handleMapLoaded);
				mapHolder.addElement(map);
				var file:File = File.applicationDirectory;
				file = file.resolvePath(PATH+region.fxgmap);
				map.load(file,region);
				map.percentHeight = 100;
				map.percentWidth = 100;
				
				for each(var c:MapRenderer in renderers) {
					if(c && c.data && c.data.country.region.name != region.name) {
						c .visible = false;
					}
					if(c && c.data && c.data.country.region.name == region.name) {
						c.visible = true;
					}
				}
			}
			public function toggleOpacity(value:Number):void {
				if(mapHolder) {
					var a:int = value==1?0:1;
					opacity = value==1?false:true;
					TweenNano.to(mapHolder,.5,{alpha:a});
				}
				for each(var renderer:MapRenderer in renderers) {
					TweenNano.to(renderer, .5, {fillAlpha:value,onUpdate:updateRenderer,onUpdateParams:[renderer]});
				}
				if(value != 1) {
					holder.balls.collideInternal = false;
				
				}else {
					holder.balls.collideInternal = true;
					holder.start();
				}
			}
			public function get viewOptions():Array {
				return [maxRadius,opacity,currentYear];
			}
			protected function doVisualize():void {
				var r:Number;
				var c:MapRenderer;
				var row:DataRow;
				
				var world:FXGLoader = mapHolder.getElementAt(0) as FXGLoader;
				
				for each(row in dataset.rows) {
					if(dataset.type == 1) {
						var content:String;
						if(dataset.time == 1) {
							r = (row[dataset.years[0]] - dataset.min) / (dataset.max - dataset.min) * maxRadius as Number;
							currentYear = dataset.years[0];
							content =  generateContent(row[dataset.years[0]],dataset.years[0]);
						}
						else {
							r = (row.value - dataset.min) / (dataset.max - dataset.min) * maxRadius as Number;
							content = generateContent(row.value);
						}
					}
					c = renderersDictionary[row.country.shortname];
					if(c) {
						c.data = row;
						c.content = content;
						var region:Region;
						for each(var reg:Region in _categories.source) {
							if(c.data.country.region.name == reg.name) {
								region = reg;
							}
						}
						if(region.selected) {
							c.visible = true;
						}
						else {
							c.visible = false;
						}								
						c.radius = r;
					}
				}
				firstPass = false;
				var timer:CallTimer = new CallTimer(adjustRenderers,null,250,1);
				timer.start();	
			}			
			private function adjustRenderers():void {
				var visibleItems:Array = [];
				var c:MapRenderer;
				var map:FXGLoader = mapHolder.getElementAt(0) as FXGLoader;
				for each(var countrySprite:Shape in map.countries) {
					c = renderersDictionary[countrySprite.name];						
					if(c)  {
						c.countrySprite = countrySprite;
						c.draw();
						visibleItems.push(c);
					}
				}
				for each(c in renderers) {
					if(visibleItems.indexOf(c) == -1) {
						c.visible = false;
					}
				}
				updateSize();
			}
			private function updateRenderer(renderer:MapRenderer):void {
				renderer.draw();
			}
			private function doResize():void {
				var maxW:Number = 0;
				var widestSprite:Sprite;
				var widestRegion:Region;
				var i:int = 0;
				var child:FXGLoader;
				var fxgSprite:Sprite;
				var fxgRatio:Number;
				var ratio:Number;
				var sx:Number;
				var sy:Number;
				var matr:Matrix;
				var nw:Number; var nh:Number;  

				for each(var c:MapRenderer in renderers) {
					c.draw();
				}
				
				if(mapHolder.numElements == 1) {
					child = FXGLoader(mapHolder.getElementAt(0)) as FXGLoader;
					if(!holder.balls.collideInternal)
						TweenNano.to(child,0.5,{alpha:1});
					fxgSprite = child.fxgSprite;
					widestSprite = fxgSprite.getChildAt(0) as Sprite;
					fxgRatio = fxgSprite.width / fxgSprite.height;
					ratio =  mapHolder.width/ mapHolder.height;  
					if(ratio >= fxgRatio) {
						nh = mapHolder.height;
						nw = nh*fxgRatio;
					}
					else {
						nw = mapHolder.width;
						nh = nw/fxgRatio;
					}
					sx = nw/widestSprite.width;
					sy = nh/widestSprite.height;
					
					matr = widestSprite.transform.matrix;
					matr.scale(sx, sy);
					fxgSprite.transform.matrix = matr;
					fxgSprite.x = (child.width / 2) - (fxgSprite.width / 2 );
					fxgSprite.y = (child.height / 2) - (fxgSprite.height / 2);
				}
			}
			private function creationCompleteHandler(event:FlexEvent):void {	
				renderers = new Vector.<MapRenderer>;
				renderersDictionary = new Dictionary();
				for each(var country:Country in _client.countries.source) {
					var c:MapRenderer = new MapRenderer(holder.engine,this);
					c.id = country.shortname;						
					renderers.push(c);
					renderersDictionary[country.shortname] = c;
					holder.balls.addParticle(c);
					c.visible = false;
				}
				if(!_isCompare)
					loadWorldMap();
				else {
					for each(var region:Region in _categories.source) {
						if(region.selected) {
							selectCategory(region);
							break;
						}
					}
				}
			}
			private function handleMapLoaded(event:Event):void {
				FXGLoader(event.target).removeEventListener(Event.COMPLETE,handleMapLoaded);
				if(firstPass) {
					doVisualize();
				}
				else {
					var timer:CallTimer = new CallTimer(adjustRenderers,null,250,1);
					timer.start();				
				}
			}
			private function loadWorldMap():void {
				if(!firstPass)
					mapHolder.removeAllElements();
				var map:FXGLoader = new FXGLoader();
				map.addEventListener(Event.COMPLETE,handleMapLoaded);
				mapHolder.addElement(map);				
				var file:File = File.applicationDirectory;
				file = file.resolvePath(PATH+"world_map.xml");
				var r:Region = new Region();
				r.coeff = 1; r.fxgmap = "world_map.xml";
				map.load(file,r);
				map.percentHeight = 100;
				map.percentWidth = 100;
			}
			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w,h);
				if(resizeFlag) {
					resizeFlag = false;
					doResize();
					if(holder.balls.collideInternal)
						holder.start();
					//holder.visible = true;
				}
			}
			private function generateContent(value:String,year:int=-1):String {
				var result:String = "<TextFlow xmlns='http://ns.adobe.com/textLayout/2008'><p fontFamily='FlamaBook'>";
				result += '<span color="#cccccc">'+dataset.name;
				if(year != -1)
					result += '('+year+')';
				result += ': </span><span color="#ffffff">'+value+'</span>';
				result += "</p></TextFlow>";
				return result;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Fade alphaTo="1" duration="500" id="fadeIn" />
		<s:Fade alphaTo="0" duration="500" id="fadeOut" />
	</fx:Declarations>
	
	<s:HGroup width="100%" height="100%"  id="mapHolder" gap="2"    />
	<views:PhysicsScene id="holder" width="100" height="100%"   />
</modules:Module>
