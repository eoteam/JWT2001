<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"  width="100%" height="100%"
				xmlns:mx="library://ns.adobe.com/flex/mx"  clipAndEnableScrolling="true"
				xmlns:modules="ws.tink.spark.modules.*" contentBackgroundColor="0xff0000" resize="module1_resizeHandler(event)"
				implements="com.pentagram.instance.view.visualizer.IMapView" xmlns:assets="assets.*" xmlns:maps="assets.maps.*">
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenNano;
			import com.greensock.easing.Expo;
			import com.pentagram.instance.view.visualizer.renderers.CircleSprite;
			import com.pentagram.model.vo.DataRow;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.util.ViewUtils;
			
			import flare.animate.Scheduler;
			import flare.animate.TransitionEvent;
			import flare.animate.Transitioner;
			import flare.display.DirtySprite;
			import flare.scale.ScaleType;
			import flare.util.palette.SizePalette;
			import flare.vis.Visualization;
			import flare.vis.data.Data;
			import flare.vis.data.DataSprite;
			import flare.vis.events.TooltipEvent;
			import flare.vis.operator.encoder.ColorEncoder;
			import flare.vis.operator.encoder.PropertyEncoder;
			import flare.vis.operator.encoder.SizeEncoder;
			import flare.vis.operator.layout.AxisLayout;
			
			import mx.events.ResizeEvent;
			
			import spark.primitives.Graphic;
			
			protected var renderers:Array = [];
			protected var maxRadius:Number = 25;
			protected var dataset:Dataset;
			protected var currentYear:int;
			
			public function toggleMap(visible:Boolean):void {
				if(map)
					map.visible = visible;
			}
			private var firstPass:Boolean = true;
			public function visualize(dataset:Dataset):void {
				this.dataset = dataset;
				trace(dataset.max,dataset.min,"\n","=#=#=#=#===###");
				var r:Number;
				var c:CircleSprite;
				var row:DataRow;
				
				for each(row in dataset.rows) {
					var x:Number = row.xcoord*width/939.747;
					var y:Number = row.ycoord*height/394.863;
					if(dataset.type == 1) {
						if(dataset.time == 1) {
							r = (row[dataset.years[0]] - dataset.min) / (dataset.max - dataset.min) * maxRadius as Number;
							currentYear = dataset.years[0];
						}
						else
							r = (row.value - dataset.min) / (dataset.max - dataset.min) * maxRadius as Number;
					}
					if(firstPass) {
						c = new CircleSprite(row,[row.country.region.color,row.country.region.color],r,x,y);
						c.id = dataset.rows.getItemIndex(row).toString();
						holder.addElement(c);
						renderers.push(c);
					}
					else {
						c = holder.getElementAt(dataset.rows.getItemIndex(row)) as CircleSprite;
						c.data = row;
						c.radius = r;
					}
				}
				firstPass = false;
			}
			
			private var _continous:Boolean = false;
			public function get continous():Boolean{
				return _continous;
			}			
			public function set continous(value:Boolean):void{
				_continous = value;
				if(_continous == false) {
					pause(); 
				}
				else {
					resume();
				}
			}
			public function unload():void {
				
			}			
			public function resume():void {
				
			}
			public function pause():void {
				
			}
			public function updateMaxRadius(value:Number):void {
				this.maxRadius = value;
				update();
			}
			public function updateYear(year:int):void {
				this.currentYear = year;
				update();
			
			}
			public function update():void {
				if(dataset.time == 1 && currentYear >= Number(dataset.years[0]) && currentYear <= Number(dataset.years[1])) {
					
					for each(var c:CircleSprite in renderers) {
						var r:Number = (c.data[currentYear] - dataset.min) / (dataset.max - dataset.min) * maxRadius;
						//trace(r);
						TweenNano.to(c, .5, {radius: r});
					}
				}
			}
			protected function module1_resizeHandler(event:ResizeEvent):void {
				for each(var c:CircleSprite in renderers) {
					c.x = c.data.xcoord*width/939.747;
					c.y = c.data.ycoord*height/394.863;
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Fade alphaTo="1" duration="500" id="fadeIn" />
		<s:Fade alphaTo="0" duration="500" id="fadeOut" />
	</fx:Declarations>
	<maps:view_map_KD_2  id="map" width="100%" height="100%" />

	
	<s:Group id="holder" width="100%" height="100%" />
	
</modules:Module>
