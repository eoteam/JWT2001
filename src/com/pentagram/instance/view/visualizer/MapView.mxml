<?xml version="1.0" encoding="utf-8"?>
<modules:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"  width="100%" height="100%"
				xmlns:mx="library://ns.adobe.com/flex/mx"  clipAndEnableScrolling="true"
				xmlns:modules="ws.tink.spark.modules.*" contentBackgroundColor="0xff0000" 
				resize="handleResize(event)" creationComplete="module1_creationCompleteHandler(event)"
				implements="com.pentagram.instance.view.visualizer.interfaces.IMapView" 
				xmlns:assets="assets.*" 
				xmlns:maps="assets.maps.*" 
				xmlns:visualizer="com.pentagram.instance.view.visualizer.*" xmlns:layouts="com.pentagram.view.layouts.*">
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenNano;
			import com.pentagram.instance.view.visualizer.renderers.CircleSprite;
			import com.pentagram.model.vo.DataRow;
			import com.pentagram.model.vo.Dataset;
			import com.pentagram.model.vo.Region;
			import com.pentagram.utils.CallTimer;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			private var renderers:Vector.<CircleSprite> = new Vector.<CircleSprite>;
			private var maxRadius:Number = 25;
			private var dataset:Dataset;
			private var currentYear:int;
			private const PATH:String = "Sites/Pentagram/View/src/assets/maps/";
			
			public function toggleMap(visible:Boolean):void {
				if(mapHolder)
				mapHolder.visible = visible;
			}
			private var firstPass:Boolean = true;
			public function visualize(dataset:Dataset):void {
				this.dataset = dataset
				var r:Number;
				var c:CircleSprite;
				var row:DataRow;
				
				var world:FXGLoader = mapHolder.getElementAt(0) as FXGLoader;
				
				for each(row in dataset.rows) {
					var x:Number = row.xcoord*width/939.747;
					var y:Number = row.ycoord*height/394.863;
					if(dataset.type == 1) {
						if(dataset.time == 1) {
							r = (row[dataset.years[0]] - dataset.min) / (dataset.max - dataset.min) * maxRadius as Number;
							currentYear = dataset.years[0];
						}
						else
							r = (row.value - dataset.min) / (dataset.max - dataset.min) * maxRadius as Number;
					}
					if(firstPass) {
						if(world.countries[row.country.shortname]) {
							c = new CircleSprite(world.countries[row.country.shortname],row,[row.country.region.color,row.country.region.color],r);
							c.id = dataset.rows.getItemIndex(row).toString();
							holder.addElement(c);
							renderers.push(c);
						}
					}
					else {
						c = holder.getElementAt(dataset.rows.getItemIndex(row)) as CircleSprite;
						c.data = row;
						c.radius = r;
					}
				}
				firstPass = false;
			}
			
			private var _continous:Boolean = false;
			public function get continous():Boolean{
				return _continous;
			}			
			public function set continous(value:Boolean):void{
				_continous = value;
				if(_continous == false) {
					pause(); 
				}
				else {
					resume();
				}
			}
			public function unload():void {
				
			}			
			public function resume():void {
				
			}
			public function pause():void {
				
			}
			public function updateMaxRadius(value:Number):void {
				this.maxRadius = value;
				update();
			}
			public function updateYear(year:int):void {
				this.currentYear = year;
				update();
			
			}
			public function update():void {
				if(dataset.time == 1 && currentYear >= Number(dataset.years[0]) && currentYear <= Number(dataset.years[1])) {
					
					for each(var c:CircleSprite in renderers) {
						var r:Number = (c.data[currentYear] - dataset.min) / (dataset.max - dataset.min) * maxRadius;
						TweenNano.to(c, .5, {radius: r});
					}
				}
			}
			public function removeRegion(region:Region):void {
				for (var i:int=0;i<mapHolder.numElements;i++) {
					var map:FXGLoader = mapHolder.getElementAt(i) as FXGLoader;
					if(map.filename == region.fxgmap)
						mapHolder.removeElement(map);
				}
				handleResize();
			}
			public function selectRegion(region:Region):void {
				var existingMap:FXGLoader;
				for (var i:int=0;i<mapHolder.numElements;i++) {
					var map:FXGLoader = mapHolder.getElementAt(i) as FXGLoader;
					if(map.filename != region.fxgmap)
						mapHolder.removeElement(map);
					else 
						existingMap = map;
				}
				if(existingMap) {
					TweenNano.to(existingMap, .5, {width: mapHolder.width,height:mapHolder.height,onComplete:onFinishTween,onCompleteParas:[existingMap]});
					adjustRenderers();
				}
				else {
					map = new FXGLoader();
					map.addEventListener(Event.COMPLETE,handleMapLoaded);
					mapHolder.addElement(map);
					var file:File = File.userDirectory;
					file = file.resolvePath(PATH+region.fxgmap);
					map.load(file);
					map.percentHeight = 100;
					map.percentWidth = 100;
				}

			}
			private function onFinishTween(map:FXGLoader):void {
				map.percentHeight = map.percentWidth = 100;
			}
			//priv
			private function adjustRenderers():void {
				var visibleItems:Array = [];
				var c:CircleSprite;
				for (var i:int=0;i<mapHolder.numElements;i++) {
					var map:FXGLoader = mapHolder.getElementAt(i) as FXGLoader;
					for each(c in renderers) {
						if(map.countries[c.countrySprite.name] && c.data.country.region.fxgmap == map.filename) {
							c.state = true;
							c.countrySprite = map.countries[c.countrySprite.name];
							c.dirtyCoordinates();
							visibleItems.push(c);
						}
					}
				}
				for each(c in renderers) {
					if(visibleItems.indexOf(c) == -1)
						c.state = false;
				}
			}
			public function addRegion(region:Region):void {
				if(mapHolder.numElements >= 3) {
					mapHolder.removeAllElements();
					loadWorldMap();
				}
				else {
					var map:FXGLoader = new FXGLoader();
					map.addEventListener(Event.COMPLETE,handleMapLoaded);
					mapHolder.addElement(map);
					map.percentHeight = 100;
					map.percentWidth = 40;
					var file:File = File.userDirectory;
					file = file.resolvePath(PATH+region.fxgmap);
					map.load(file);	
				}
			}
			public function toggleOpacity(value:uint):void {
				for each(var renderer:CircleSprite in renderers) {
					TweenNano.to(renderer, .5, {alpha: value});
				}
			}
			private function handleResize(event:ResizeEvent=null):void {
				var maxW:Number = 0;
				var widestSprite:Sprite;
				var i:int = 0;
				var child:FXGLoader;
				var fxgSprite:Sprite;
				var fxgRatio:Number;
				var ratio:Number;
				var sx:Number;
				var sy:Number;
				var matr:Matrix;
				for each(var c:CircleSprite in renderers) {
					if(c.state)
						c.dirtyCoordinates();
				}
				if(mapHolder.numElements > 1) {					
					for (i=0;i<mapHolder.numElements;i++) {
						child = mapHolder.getElementAt(i) as FXGLoader;
						fxgSprite = child.fxgSprite;
//						child.graphics.clear();
//						child.graphics.beginFill(0xff6666,1);
//						child.graphics.drawRect(0,0,child.width,child.height);
//						child.graphics.endFill();
						var g:Sprite = fxgSprite.getChildAt(0) as Sprite;  
						if(g.width > maxW) {
							maxW = g.width;
							widestSprite = g;
						}
					}
					if(mapHolder.numElements > 0) {
						var nw:Number; var nh:Number;   
						
						fxgRatio = widestSprite.width / widestSprite.height;
						ratio = (mapHolder.width*.4)/ mapHolder.height;  
					
						if(ratio >= fxgRatio) {
							nh = mapHolder.height;
							nw = nh*fxgRatio;
						}
						else {
							nw = (mapHolder.width)*.4;
							nh = nw/fxgRatio;
						}
						sx = nw/widestSprite.width;
						sy = nh/widestSprite.height;
						
						for (i=0;i<mapHolder.numElements;i++) {
							child = mapHolder.getElementAt(i) as FXGLoader;
							fxgSprite = child.fxgSprite;
							matr = widestSprite.transform.matrix;
							matr.scale(sx, sy);
							fxgSprite.transform.matrix = matr;
							fxgSprite.x = (child.width / 2) - (fxgSprite.width / 2 );
							fxgSprite.y = (child.height / 2) - (fxgSprite.height / 2);
						}
					}
				}
				else if(mapHolder.numElements == 1) {
					child = FXGLoader(mapHolder.getElementAt(0)) as FXGLoader;
					fxgSprite = child.fxgSprite;
					widestSprite = fxgSprite.getChildAt(0) as Sprite;
					fxgRatio = fxgSprite.width / fxgSprite.height;
					ratio =  mapHolder.width/ mapHolder.height;  
					if(ratio >= fxgRatio) {
						nh = mapHolder.height;
						nw = nh*fxgRatio;
					}
					else {
						nw = mapHolder.width;
						nh = nw/fxgRatio;
					}
					sx = nw/widestSprite.width;
					sy = nh/widestSprite.height;
					
					matr = widestSprite.transform.matrix;
					matr.scale(sx, sy);
					fxgSprite.transform.matrix = matr;
					fxgSprite.x = (child.width / 2) - (fxgSprite.width / 2 );
					fxgSprite.y = (child.height / 2) - (fxgSprite.height / 2);
				}
			}
			
			private function module1_creationCompleteHandler(event:FlexEvent):void {	
					loadWorldMap();
			}
			private function handleMapLoaded(event:Event):void {
				FXGLoader(event.target).removeEventListener(Event.COMPLETE,handleMapLoaded);
				var timer:CallTimer = new CallTimer(resumeLoad,[event.target],250,1);
				timer.start();
			}
			private function resumeLoad(args:Array):void {
				handleResize();
				TweenNano.to(args[0],0.5,{alpha:1});
				if(FXGLoader(args[0]).filename != "world_map.fxg")
					adjustRenderers();
				else
					displayAllRenderers();
			}
			private function displayAllRenderers():void {
				var map:FXGLoader = mapHolder.getElementAt(0) as FXGLoader;
				for each(var c:CircleSprite in renderers) {
					if(map.countries[c.countrySprite.name]) {
						c.state = true;
						c.countrySprite = map.countries[c.countrySprite.name];
						c.dirtyCoordinates();
					}
				}
			}
			private function loadWorldMap():void {
				var map:FXGLoader = new FXGLoader();
				map.addEventListener(Event.COMPLETE,handleMapLoaded);
				mapHolder.addElement(map);
				var file:File = File.userDirectory;
				file = file.resolvePath(PATH+"world_map.fxg");
				map.load(file);
				map.percentHeight = 100;
				map.percentWidth = 100;
			}


		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Fade alphaTo="1" duration="500" id="fadeIn" />
		<s:Fade alphaTo="0" duration="500" id="fadeOut" />
	</fx:Declarations>
	
	<s:HGroup width="100%" height="100%"  id="mapHolder" gap="2" />
	<s:Group id="holder" width="100%" height="100%" />
	
</modules:Module>
