<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:vo="com.pentagram.model.vo.*"
		 xmlns:controls="com.pentagram.view.controls.*" 
		 xmlns:renderers="com.pentagram.view.renderers.*"
		 xmlns:datagrid="com.newtriks.display.datagrid.*"
		 xmlns:spark="flex.utils.spark.*">
	
	<fx:Script>
		<![CDATA[
			import com.pentagram.view.renderers.BlankRenderer;
			import com.pentagram.view.renderers.CellEditor;
			import com.pentagram.view.renderers.DGDefaultRenderer;
			import com.pentagram.view.renderers.TimeCellEditor;
			
			import mx.collections.ArrayList;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			import spark.components.DataGroup;
			import spark.components.supportClasses.DefaultColumnHeaderRenderer;
			import spark.components.supportClasses.GridColumn;
			import spark.components.supportClasses.GridSelectionMode;
			import spark.events.GridEvent;

			public function generateDataset():void {
				var column:GridColumn;
				columns.removeAll();
				//columns.addItem(countryCol);
				
				if(dataset.time == 1) {
					var years:Array = dataset.range.split(',');
					for(var i:int=years[0];i<=years[1];i++) {
						column  = new GridColumn();
						column.headerText = i.toString();
						column.itemRenderer = new ClassFactory(TimeCellEditor);
						column.dataField = i.toString();
						column.width = 75;	
						column.resizable = true;
						column.sortable = true;
						columns.addItem(column);
					}
				}
				else {
					column = new GridColumn();
					column.headerText = "Value";
					column.itemRenderer = new ClassFactory(CellEditor);
					column.dataField = "value";
					column.width = 75;	
					column.sortable = true;
					columns.addItem(column);
					
					column = new GridColumn();
					column.headerText = '';
					column.itemRenderer = new ClassFactory(BlankRenderer);
					columns.addItem(column);
				}
				currentState = "showgrid";
				grid.dataProvider = dataset.rows;
				countryList.dataProvider = dataset.rows;
				
			}
			//public function acceptDragFile():void {
				
			//}
			protected function grid_gridClickHandler(event:GridEvent):void
			{
				if(event.itemRenderer is DefaultColumnHeaderRenderer) {
 					//var dp:ICollectionView = dataset.rows;
					var sort:Sort = new Sort();
					sort.fields = [new  SortField(DefaultColumnHeaderRenderer(event.itemRenderer).data.dataField,false,false,true)];  		
					if (dataset.rows != null)
					{
						dataset.rows.sort = sort;
						dataset.rows.refresh();
					}
				}
			}

			protected function handler(event:Event):void
			{
				var group:DataGroup = grid.columnHeaderBar.dataGroup;	
				for (var i:int=0;i<group.numElements;i++) {
					var b:Button = group.getElementAt(i) as Button;
					if(b) {
						trace(i);
						b.mouseEnabled = true;
					}
				}
				
			}
			protected function handleDG(event:Event):void {
				grid.scroller.horizontalScrollBar.addEventListener(Event.CHANGE, handler, false, 0, true);
				// the value commit is needed to handle the programmatic changes of the scroll position
				grid.scroller.horizontalScrollBar.addEventListener(FlexEvent.VALUE_COMMIT, handler, false, 0, true);
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="prep" />
		<s:State name="showgrid" />
	</s:states>
	<fx:Declarations>
		<vo:Dataset id="dataset" />
		<vo:Client id="client" />
		<spark:LinkedScrollers id="linkedScrolling" component1="{grid}" component2="{countryList}"/>
		<s:Fade alphaFrom="0" alphaTo="1" duration="250" id="fadeIn" />
		<s:Fade alphaFrom="1" alphaTo="0" duration="250" id="fadeOut" />
	</fx:Declarations>

	<s:HGroup verticalAlign="top" width="90%">
		<s:Label text="Data Set Title" width="100" />
		<s:TextInput width="100%" text="{dataset.name}"  />
	</s:HGroup>
	<s:HGroup verticalAlign="top" width="90%">
		<s:Label text="Description" width="100" />
		<s:TextArea heightInLines="2" width="100%" text="{dataset.description}"  />	
	</s:HGroup>		
	
	<s:HGroup verticalAlign="top" width="90%" height="100%" gap="0">
		<s:Label text="Data Set" width="100" />
		<s:Rect width="5" />
		<s:Group width="100%" height="100%">
			<s:Rect top="0" left="0" right="0" bottom="0">
				<s:stroke>
					<s:SolidColorStroke color="0xcccccc" weight="2"/>
				</s:stroke>
			</s:Rect>
			<controls:MiGList minWidth="50" left="1" top="2" bottom="2"  sortField="name" contentBackgroundColor="0xffffff" height="100%" id="countryList" labelField="name" headerText="Countries" skinClass="com.pentagram.view.skins.MiGListSkin"  />
			<s:DataGrid updateComplete="handler(event)" left="{countryList.width+.5}" borderVisible="false"  
			selectionMode="{GridSelectionMode.MULTIPLE_CELLS}" right="1" top="2" bottom="2"  creationComplete="handleDG(event)"
			height="100%" id="grid" gridClick="grid_gridClickHandler(event)">
				<s:columns>
					<s:ArrayList id="columns">
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:Group>			
	</s:HGroup>
</s:VGroup>
