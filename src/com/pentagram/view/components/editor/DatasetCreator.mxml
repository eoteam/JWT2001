<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 width="100%" height="100%"
		 xmlns:editor="com.pentagram.view.components.editor.*" xmlns:prompt="com.pentagram.view.components.editor.prompt.*">

	<fx:Declarations>
		<s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="250" effectEnd="fadeOut_effectEndHandler(event)" />
		<s:Fade id="fadeNext" alphaFrom="0" alphaTo="1" duration="250" />
		<s:Move id="moveDownEffect" easer="{easer}" duration="500" startDelay="250" target="{promptsContainer}"  
		yTo="{promptsContainer.y-PROMPT_MOVE_INTERVAL}"   />
		<s:Move id="moveUpEffect" easer="{easer}" duration="500" target="{promptsContainer}"  
		yTo="{promptsContainer.y+PROMPT_MOVE_INTERVAL}"   />
		<s:Power exponent="2" easeInFraction="0.75" id="easer" />
	</fx:Declarations>	
	
	<fx:Script>
		<![CDATA[
			import com.pentagram.view.components.editor.prompt.DataTypePrompt;
			import com.pentagram.view.components.editor.prompt.TimeRangePrompt;
			import com.pentagram.view.components.editor.prompt.UnitsPrompt;
			import com.pentagram.view.components.editor.prompt.YesNoPrompt;
		import com.pentagram.model.vo.Dataset;
		import com.pentagram.view.event.DataPromptEvent;
		import com.pentagram.view.event.ViewEvent;
		
		import mx.core.IVisualElement;
		import mx.core.UIComponent;
		import mx.events.EffectEvent;
		
		private var _sheetName:String;
		private var _timeType:String;
		private var _yearRange:Array = new Array();
		
		private const PROMPT_MOVE_INTERVAL:int = 100;
		
		private var _timeTypePrompt:YesNoPrompt;
		private var _timeRangePrompt:TimeRangePrompt;
		private var _dataTypePrompt:DataTypePrompt;
		private var _unitsPrompt:UnitsPrompt;

		public var dataset:Dataset;
		
		public function  reset():void {
			var len:int = promptsContainer.numElements;
			promptsContainer.removeAllElements();
			promptsContainer.addElement(titlePrompt);
			titlePrompt.enabled = true;
			titlePrompt.input.text = "";
			promptsContainer.y = 0;
			titlePrompt.alpha = 1;
		}
			
		private function titleNextHandler():void {			
			titlePrompt.enabled = false;
			_sheetName = titlePrompt.title;
			_timeTypePrompt = new YesNoPrompt();
			_timeTypePrompt.prompt = "Is the data set over a time period?";
			_timeTypePrompt.addEventListener(DataPromptEvent.TIME_TYPE_NEXT,timeTypeNextHandler,false,0,true);
			_timeTypePrompt.addEventListener(DataPromptEvent.TIME_TYPE_BACK,backHandler,false,0,true);
			_timeTypePrompt.alpha = 0;
			promptsContainer.addElement(_timeTypePrompt);
			fadeNext.target = _timeTypePrompt;
			fadeNext.play();
		}
		private function timeTypeNextHandler(event:DataPromptEvent):void {				
			event.target.enabled = false;
			if(event.target.selectedAnswer == "true") {
				_timeType = "time";				
				_timeRangePrompt = new TimeRangePrompt();
				_timeRangePrompt.addEventListener(DataPromptEvent.TIME_RANGE_NEXT,timeRangeNextHandler,false,0,true);
				_timeRangePrompt.addEventListener(DataPromptEvent.TIME_RANGE_BACK,backHandler,false,0,true);
				promptsContainer.addElement(_timeRangePrompt);
				animateNext(_timeRangePrompt);					
			}
			else {
				_timeType = "static";					
				_dataTypePrompt = new DataTypePrompt();
				_dataTypePrompt.addEventListener(DataPromptEvent.DATA_TYPE_NEXT,dataTypeNextHandler,false,0,true);
				_dataTypePrompt.addEventListener(DataPromptEvent.DATA_TYPE_BACK,backHandler,false,0,true);
				promptsContainer.addElement(_dataTypePrompt);
				animateNext(_dataTypePrompt);
			}				
		}
		private function timeRangeNextHandler(event:DataPromptEvent):void {
			event.target.enabled = false;			
			_yearRange[0] = _timeRangePrompt.startYear;
			_yearRange[1] = _timeRangePrompt.endYear;			
			_dataTypePrompt = new DataTypePrompt();
			_dataTypePrompt.addEventListener(DataPromptEvent.DATA_TYPE_NEXT,dataTypeNextHandler);
			_dataTypePrompt.addEventListener(DataPromptEvent.DATA_TYPE_BACK,backHandler);
			promptsContainer.addElement(_dataTypePrompt);
			animateNext(_dataTypePrompt);
		}
		private function dataTypeNextHandler(event:DataPromptEvent):void {
			event.target.enabled = false;
			if(event.target.selectedAnswer == "qual") {
				dataset = new Dataset();
				dataset.time = _timeType == "time" ? 1:0;
				dataset.type = 0;
				dataset.name = this._sheetName;
				if(dataset.time == 1)
					dataset.years = _yearRange;
				this.dispatchEvent(new ViewEvent(ViewEvent.DATASET_CREATOR_COMPLETE,dataset));
			}
			else if(event.target.selectedAnswer == "quant") {
				_unitsPrompt = new UnitsPrompt();
				_unitsPrompt.addEventListener(DataPromptEvent.UNITS_NEXT,unitsNextHandler,false,0,true);
				_unitsPrompt.addEventListener(DataPromptEvent.UNITS_BACK,backHandler,false,0,true);
				promptsContainer.addElement(_unitsPrompt);
				animateNext(_unitsPrompt);
			}
		}
		private function unitsNextHandler(event:DataPromptEvent):void {
			event.target.enabled = false;
			dataset = new Dataset();
			dataset.time = _timeType == "time" ? 1:0;
			dataset.type = 1; //because of unit
			dataset.name = this._sheetName;
			if(dataset.time == 1)
				dataset.years = _yearRange;
			dataset.multiplier = _unitsPrompt.selectedScaleFactor? _unitsPrompt.selectedScaleFactor.value : 0;
			dataset.unit = _unitsPrompt.selectedUnit;
			this.dispatchEvent(new ViewEvent(ViewEvent.DATASET_CREATOR_COMPLETE,dataset));								
		}
		
		private function backHandler(event:DataPromptEvent):void {		
			fadeOut.target = event.target;
			fadeOut.play();
		}
		private function animateNext(t:UIComponent):void {
			t.alpha = 0;
			fadeNext.target = t;
			fadeNext.play();
			moveDownEffect.play();	 
		}
		private function fadeOut_effectEndHandler(event:EffectEvent):void {
			promptsContainer.removeElement(fadeOut.target as IVisualElement);
			UIComponent(promptsContainer.getElementAt(promptsContainer.numElements-1)).enabled = true;
			if(promptsContainer.numChildren > 1)
				moveUpEffect.play();
		}
		]]>
	</fx:Script>

	<s:Label text="Add a Data Set" styleName="addDataTitle" />
	<s:Rect height="15" />
	
	<s:Group width="100%" height="100%">
		<s:VGroup id="promptsContainer" width="100%" mask="{promptsMask}"  gap="12">
			<prompt:TitlePrompt id="titlePrompt" next="titleNextHandler()" />
		</s:VGroup>
		
		<s:Group id="promptsMask" width="100%" height="400">
			<s:Rect top="0" bottom="0" left="0" right="0" >
				<s:fill>
					<s:SolidColor color="0xff0000" />
				</s:fill>
			</s:Rect>
		</s:Group>		
	</s:Group>
</s:VGroup>
