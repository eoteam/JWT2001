<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabledStates="0.5">

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
    ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            var cr:Number = getStyle("cornerRadius");
            
           /*  if (cornerRadius != cr)
            {
                cornerRadius = cr;
                shadow.radiusX = cornerRadius;
                fill.radiusX = cornerRadius;
                lowlight.radiusX = cornerRadius;
                highlight.radiusX = cornerRadius;
                border.radiusX = cornerRadius;
            }
            
            if (highlightStroke) highlightStroke.radiusX = cornerRadius;
            if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
            if (hldownstroke2) hldownstroke2.radiusX = cornerRadius; */
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        
        private var cornerRadius:Number = 2;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" stateGroups="deselectedStates"/>
        <s:State name="over" stateGroups="overStates,deselectedStates" />
        <s:State name="down" stateGroups="downStates,deselectedStates" />
        <s:State name="disabled" stateGroups="disabledStates,deselectedStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90" scaleX="40.049" x="50.028" y="2">
				<s:GradientEntry alpha="0" alpha.selectedStates="1.0" color="#404040" color.overStates="#494A4A" ratio="0" ratio.overStates="0.03529411764705882"/>
				<s:GradientEntry alpha="0" alpha.selectedStates="1.0" color="#262626" color.overStates="#444545" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
    
    
    <s:Label id="labelDisplay" fontFamily="FlamaBold"
             textAlign="left" text="more info" text.selectedStates="close"
			 focusEnabled="false" color.selectedStates="0xffffff"
             verticalAlign="middle"
             maxDisplayedLines="1" verticalCenter="0"
             horizontalCenter="0" 
             left="10" right="15" top="2" bottom="2">
    </s:Label>
    

	
	<s:Group verticalCenter="0"  right="8">
		<s:Line id="line4" includeIn="selectedStates" x="0.5" xTo="8" y="0.5" yTo="8">
			<s:stroke>
				<s:SolidColorStroke caps="none" color="#ffffff" joints="miter" miterLimit="10" weight="2"/>
			</s:stroke>
		</s:Line>
		<s:Line id="line3" includeIn="selectedStates" x="0.5" xFrom="8" y="0.5" yTo="8">
			<s:stroke>
				<s:SolidColorStroke caps="none" color="#ffffff"  joints="miter" miterLimit="10" weight="2"/>
			</s:stroke>
		</s:Line>
		<s:Path data="M 7.584 0 L 3.792 6.568 L 0 0 L 7.584 0 Z" id="path1" includeIn="deselectedStates" 
				winding="nonZero" x="3.82" y="4.298">
			<s:fill>
				<s:SolidColor color="#333333"/>
			</s:fill>
		</s:Path>
	</s:Group>


</s:SparkSkin>
