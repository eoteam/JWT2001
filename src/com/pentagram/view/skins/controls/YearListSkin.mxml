<?xml version="1.0" encoding="utf-8"?>



<!--- Custom skin  for a Spark List component.  


-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="112"
			 alpha.disabled="0.5" blendMode="normal"> 
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.List")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For list, the skin itself is colorized but the individual parts are not. */
		static private const exclusions:Array = ["scroller", "background"];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			if (getStyle("borderVisible") == true)
			{
				border.visible = true;
				scroller.minViewportInset = 1;
			}
			else
			{
				border.visible = false;
				scroller.minViewportInset = 0;
			}
			
			borderStroke.color = getStyle("borderColor");
			borderStroke.alpha = getStyle("borderAlpha");
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	
	<fx:Declarations>
		<!--- 
		Defines the appearance of the the List's drop indicator.
		To customize the drop indicator appearance, create a custom ListSkin class.
		The List's layout takes care to size and position the dropIndicator.
		The size of the <code>dropIndicator</code> is typically set to the size of the gaps between the items.
		The minimum and maximum settings are typically respected only in the direction
		along the major axis (the gap axis).  For example a VerticalLayout ignores the 
		<code>minWidth</code> and <code>maxWidth</code> settings, 
		but respect <code>minHeight</code> and <code>maxHeight</code>. 
		
		@copy spark.components.List#dropIndicator
		-->
		<fx:Component id="dropIndicator">
			<s:Group minWidth="3" minHeight="3" maxWidth="3" maxHeight="3">
				<s:Rect left="0" right="0" top="0" bottom="0">
					<s:fill>
						<!--- Defines the color of the background. -->
						<s:SolidColor color="0xBBBBBB" />
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0x868686" weight="1"/>
					</s:stroke>
				</s:Rect>
			</s:Group>
		</fx:Component>
		
	</fx:Declarations>
	
	<!-- border -->
	<!--- @private -->
	<s:Rect left="0" right="0" top="0" bottom="0" id="border">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="1"/>
		</s:stroke>
	</s:Rect>
	
	
	<!--- The Scroller component to add scroll bars to the list. -->
	<s:Scroller left="0" top="0" right="0" bottom="0" id="scroller" >
		
		<s:Group left="0" top="0" right="0" bottom="10">
			<s:DataGroup id="dataGroup" 
						 left="22" top="26" right="22" bottom="26"
						 itemRenderer="spark.skins.spark.DefaultItemRenderer">
			</s:DataGroup>
		</s:Group>
		
	</s:Scroller>
</s:SparkSkin>