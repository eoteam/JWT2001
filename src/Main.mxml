<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
					   	xmlns:mx="library://ns.adobe.com/flex/mx"
 						xmlns:samples="samples.*"

						creationComplete="handleCreationComplete()" 
						applicationComplete="init()" xmlns:graphics="com.pentagram.view.graphics.*" xmlns:view="com.pentagram.view.*">
	<!--						nativeDragEnter="onDragIn(event)"
	nativeDragDrop="onDragDrop(event)" -->
	<fx:Style source="assets/main.css" />
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import com.pentagram.ViewContext;
			
			import flash.events.NativeWindowBoundsEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			
			import flashx.textLayout.compose.TextLineRecycler;
			
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.events.AIREvent;
			import mx.events.FlexEvent;
			import mx.events.StyleEvent;
	
			
			protected var monitor:URLMonitor;
			protected var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI(); // Used for auto-update
			protected var file:File; // Used for preferences file
			protected var currentVersion:String="1.0"


			
			protected var context:ViewContext;

			private function handleCreationComplete(): void {
				this.createDeferredContent();
				context = new ViewContext();
				context.contextView = this;		
				TextLineRecycler.textLineRecyclerEnabled = false;
			}  
			
			protected function init():void
			{
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				addEventListener(AIREvent.APPLICATION_ACTIVATE, onAppActivate);
				addEventListener(AIREvent.APPLICATION_DEACTIVATE, onAppDeactivate);

				// Center main AIR app window on the screen
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;

				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);

				// Detecting online/offline network connectivity with a URLMonitor
				monitor = new URLMonitor(new URLRequest("http://www.adobe.com")); // change URL to URL desired
				monitor.addEventListener(StatusEvent.STATUS, onStatusChange);
				monitor.pollInterval = 20000;// Milliseconds
				monitor.start();

				// Check for update
				this.checkUpdate();

				// Detects a general change in network status
				NativeApplication.nativeApplication.addEventListener(Event.NETWORK_CHANGE,onNetworkChange);

				// Detecting if user is present
				NativeApplication.nativeApplication.idleThreshold = 5;
				NativeApplication.nativeApplication.addEventListener(Event.USER_IDLE, onUserIdle);
				NativeApplication.nativeApplication.addEventListener (Event.USER_PRESENT, onUserPresent);

				// Get notified when minimize/maximize occurs
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);

				// Get notified when window resizing occurs
				nativeWindow.addEventListener(NativeWindowBoundsEvent.RESIZE,onWindowResize);

				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, errorHandler);

				// Create a native menu with two items in the top-level application menu. 
				
				if (NativeApplication.supportsMenu)
				{
					var m:NativeMenu = NativeApplication.nativeApplication.menu;
					var win:NativeMenuItem = m.items[3] as NativeMenuItem;
					var fs:NativeMenuItem = new NativeMenuItem("Full Screen");
					win.submenu.addItem(fs);			
					fs.addEventListener(Event.SELECT,onItemSelect);				
				}
				else if (NativeWindow.supportsMenu)
				{
//					var menu:NativeMenu = new NativeMenu();
//					nativeWindow.menu = menu;
//					item1 = stage.nativeWindow.menu.addItem(new NativeMenuItem("My App Menu"));
//					item1.addEventListener(Event.SELECT,onItemSelect);
				}

				// Manually close all open Windows when app closes.
				this.nativeWindow.addEventListener(Event.CLOSING,onAppWinClose);

				// Create a file for storing preferences in the application storage directory
				file = File.applicationStorageDirectory;
				file = file.resolvePath("Preferences/version.txt");
				trace("Preferences file location: " + file.nativePath);
				if (file.exists)
					checkVersion();
				else firstRun();

			}

			// The application is now in the foreground and active
			protected function onAppActivate(event:Event):void {
				trace("Handling application activate event");
			}

			// Handle the application being sent to the background
			protected function onAppDeactivate(event:Event):void {
				trace("Handling application deactivate event");
			}

			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}

			// Handles when the HTTP Network status has changed.
			protected function onStatusChange(e:StatusEvent):void
			{
				if (monitor.available) 
				{
					trace("Network is online");
				} else {
					trace("Network is offline");
				}
			}

			// This function is triggered when the application finished loading.
			// Initialize appUpdater and set some properties
			protected function checkUpdate():void
			{
				// set the URL for the update.xml file
				appUpdater.updateURL = "http://www.myappurl.com/update.xml";
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onUpdaterError);
				// Hide the dialog asking for permission for checking for a new update.
				// If you want to see it just leave the default value (or set true).
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.initialize();
			}

			// Handler function triggered by the ApplicationUpdater.initialize.
 			// The updater was initialized and it is ready to take commands.
			protected function onUpdate(event:UpdateEvent):void 
			{
				// start the process of checking for a new update and to install
				appUpdater.checkNow();
			}

			// Handler function for error events triggered by the ApplicationUpdater.initialize
			protected function onUpdaterError(event:ErrorEvent):void
			{
				Alert.show(event.toString());
			}

			// The network status has changed
			protected function onNetworkChange(e:Event):void
			{
				trace("Network State Changed");
			}

			// Called when the user is idle 
			protected function onUserIdle(event:Event):void {
				trace("Handling user idle event");
			}

			// Called when the user is active again - status will change if idle for more than 5 seconds
			protected function onUserPresent(event:Event):void
			{
				trace("Handling user present event");
			}

			// Handles when the app is minimized/maximized
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}

			// Called when window is resized
			protected function onWindowResize(event:NativeWindowBoundsEvent):void
			{
				trace("Window resizing");
			}

			// Handle Global Errors
			protected function errorHandler(e:UncaughtErrorEvent):void
 			{
    			e.preventDefault();
    			Alert.show("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Handle Menu item selection
			protected function onItemSelect(e:Event):void
			{
				if( stage.displayState == StageDisplayState.NORMAL ) {
						stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
						this.showStatusBar = false;
				} 
				else {
						stage.displayState = StageDisplayState.NORMAL;
						this.showStatusBar = true;
				}
			}

			// Called when application window closes
			protected function onAppWinClose(e:Event):void
			{
				trace("Handling application window close event");
				closeOpenWindows(e);
			}

			// Closes all open windows
			protected function closeOpenWindows(e:Event):void
			{
				// This code can be uncommented to prevent the default close action from occurringand first call the close method on each open window to
				// perform any actions needed. Closes each from most recently opened to oldest.
				//e.preventDefault();
				//for (var i:int = NativeApplication.nativeApplication.openedWindows.length - 1; i>= 0; --i)
				//{
					//NativeWindow(NativeApplication.nativeApplication.openedWindows[i]).close();
				//}
			}

			// Check for current version from saved prefs file. If no file exists, this is the first time run
			protected function checkVersion():void
			{
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.READ);
				var prevVersion:String = stream.readUTFBytes(stream.bytesAvailable);
				stream.close();
				if (prevVersion == currentVersion) {
					trace("Current version running");
				}
				else
				{
					writeVersionFile();
				}
			}

			protected function firstRun():void
			{
				trace("First time the application has been run, save to the file.");
				writeVersionFile();
			}

			protected function writeVersionFile():void
			{
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeUTFBytes(currentVersion);
				stream.close();
			}
			import flash.filesystem.FileMode;
			private function onDragIn(event:NativeDragEvent):void {
				if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
					NativeDragManager.acceptDragDrop(this);
				}
			}
			
			private function onDragDrop(event:NativeDragEvent):void {
				if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
					var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					for(var n:uint = 0; n < files.length; n++) {
						convertFile(files[n] as File);
					}
				}
			}
			
			private function convertFile(f:File):void {
				// Load the CSV file
				var fs:FileStream = new FileStream();
				fs.open(f, FileMode.READ);
				var csvFile:String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				// Choose the line ending to split the lines based on which one yields more than one line
				var endings:Array = [File.lineEnding, "\n", "\r"];
				var i:uint = 1;
				var lines:Array = csvFile.split(endings[0]);
				while(lines.length == 1 && i < endings.length) {
					lines = csvFile.split(endings[i++]);
				}
				
				// Figure out the number of columns and split each line
				var numCols:uint = 0;
				for(var n:uint = 0; n < lines.length; n++) {
					//csvText.text += lines[n]+"\n";
					lines[n] = lines[n].split(",");
					numCols = Math.max(numCols, lines[n].length);
				}
			}
		]]>
	</fx:Script>
	<!--<main:MainView width="100%" height="100%"  id="mainView"/>  -->
	
	<view:MainView width="100%" height="100%" verticalCenter="0" horizontalCenter="0"/>
	
	<!--<s:Label fontSize="14" text='LaunchPad'/>
	<mx:TabNavigator width="100%" height="100%">
		<samples:SampleOpenWithDefault/>
		<samples:SampleDatabase/>
		<samples:SampleClipboard/>
		<samples:SampleDragDrop/>
		<samples:SampleNativeProcess/>
		<samples:SampleHTML/>
		<samples:SampleSocketClient/>
		<samples:SampleSocketServer/>
		<samples:SamplePDFContent/>
		<samples:SampleDetectStorageDevice/>
		<samples:SampleNativeWindows/>
	</mx:TabNavigator>-->
</s:WindowedApplication>